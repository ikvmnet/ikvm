name: IKVM

on:
  push:
    branches:
    - main
    - master
    - develop
  pull_request:
    branches:
    - main
    - master
    - develop

jobs:
  build-openjdk8:
    name: Build OpenJDK 8
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout Source
      uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Cache OpenJDK 8 Build
      uses: actions/cache@v3
      with:
        path: openjdk8/build/linux-x86_64-normal-server-release
        key: openjdk8-build-linux-x86_64-normal-server-release--${{ runner.os }}--${{ hashFiles('openjdk8/**', '!openjdk8/build') }}-7
    - name: Check OpenJDK 8 Build Stamp
      id: openjdk8-build-stamp
      uses: andstor/file-existence-action@v1
      with:
        files: openjdk8/build/linux-x86_64-normal-server-release/stamp
    - name: Fetch OpenJDK 7
      if: steps.openjdk8-build-stamp.outputs.files_exists != 'true'
      run: |
        mkdir -p openjdk8/build && 
        curl -o openjdk8/build/openjdk-7u75-b13-linux-x64-18_dec_2014.tar.gz "https://download.java.net/openjdk/jdk7u75/ri/openjdk-7u75-b13-linux-x64-18_dec_2014.tar.gz" &&
        tar xzvf openjdk8/build/openjdk-7u75-b13-linux-x64-18_dec_2014.tar.gz -C openjdk8/build
    - name: Build OpenJDK 8
      if: steps.openjdk8-build-stamp.outputs.files_exists != 'true'
      uses: docker://debian/eol:lenny
      with:
        args: >
          /bin/bash -c "
            echo 'deb http://archive.debian.org/debian/ lenny main' > /etc/apt/sources.list &&
            apt-get update &&
            apt-get install -y \
              build-essential \
              unzip \
              zip \
              curl \
              gcc-4.3 \
              g++-4.3 \
              libx11-dev \
              libxext-dev \
              libxrender-dev \
              libxtst-dev \
              libxt-dev \
              libxi-dev \
              libcups2-dev \
              libasound2-dev \
              libfreetype6-dev \
              libfontconfig1-dev &&
            cd openjdk8 &&
            JAVA_HOME=build/java-se-7u75-ri bash ./configure &&
            make DISABLE_HOTSPOT_OS_VERSION_CHECK=ok images &&
            touch build/linux-x86_64-normal-server-release/stamp"
    - name: Update OpenJDK 8 Attributes
      run: |
        sudo chown -R `id -u`:`id -g` linux-x86_64-normal-server-release && \
        sudo chmod -R +rwx linux-x86_64-normal-server-release/images/j2sdk-image/bin
      working-directory: openjdk8/build
    - name: Package OpenJDK 8
      run: |
        zip -r openjdk8-build-linux-x86_64-normal-server-release.zip \
          linux-x86_64-normal-server-release/langtools/gensrc \
          linux-x86_64-normal-server-release/corba/gensrc \
          linux-x86_64-normal-server-release/jdk/gensrc \
          linux-x86_64-normal-server-release/jdk/impsrc \
          linux-x86_64-normal-server-release/jdk/lib \
          linux-x86_64-normal-server-release/jdk/classes
      working-directory: openjdk8/build
    - name: Upload OpenJDK 8
      uses: actions/upload-artifact@v3
      with:
        name: openjdk8-build-linux-x86_64-normal-server-release
        path: openjdk8/build/openjdk8-build-linux-x86_64-normal-server-release.zip
    - name: Cache OpenJDK Test Harness
      uses: actions/cache@v3
      with:
        path: jtreg/build
        key: jtreg-build--${{ runner.os }}--${{ hashFiles('jtreg/**', 'openjdk8/build/linux-x86_64-normal-server-release/images/j2sdk-image', '!jtreg/build') }}-5
    - name: Check OpenJDK 8 Build Stamp
      id: jtreg-build-stamp
      uses: andstor/file-existence-action@v1
      with:
        files: jtreg/build/stamp
    - name: Build OpenJDK Test Harness
      if: steps.jtreg-build-stamp.outputs.files_exists != 'true'
      run: bash ./build.sh --jdk `realpath ../../openjdk8/build/linux-x86_64-normal-server-release/images/j2sdk-image`
      working-directory: jtreg/make
    - name: Package OpenJDK Test Harness
      run: zip -r jtreg-build.zip build
      working-directory: jtreg
    - name: Upload OpenJDK Test Harness 
      uses: actions/upload-artifact@v3
      with:
        name: jtreg-build
        path: jtreg/jtreg-build.zip
  build-ikvm:
    name: Build IKVM (Windows)
    needs:
    - build-openjdk8
    runs-on: windows-latest
    steps:
    - name: Checkout Source
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.13
      with:
        versionSpec: 5.x
    - name: Execute GitVersion
      uses: gittools/actions/gitversion/execute@v0.9.13
      with:
        useConfigFile: true
    - name: Setup .NET 3.1
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Setup WSL
      uses: Vampire/setup-wsl@v1.2.0
      with:
        additional-packages:
          gcc
          g++
    - name: Cache NuGet
      uses: actions/cache@v3
      with:
        path: ~\.nuget\packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**\*.csproj', '**\*.msbuildproj') }}
        restore-keys: ${{ runner.os }}-nuget-
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
    - name: Download OpenJDK 8 Build
      uses: actions/download-artifact@v3
      with:
        name: openjdk8-build-linux-x86_64-normal-server-release
        path: openjdk8/build
    - name: Restore OpenJDK 8 Build
      run: unzip -o openjdk8-build-linux-x86_64-normal-server-release.zip
      working-directory: openjdk8/build
    - name: NuGet Restore
      run: dotnet restore IKVM.sln
    - name: Build Artifacts
      run: |
        msbuild /m:1 `
          /p:ContinuousIntegrationBuild=true `
          /p:Configuration="Release" `
          /p:Platform="Any CPU" `
          /p:Version=${env:GitVersion_FullSemVer} `
          /p:AssemblyVersion=${env:GitVersion_AssemblyFileVer} `
          /p:AssemblyInformationalVersion=${env:GitVersion_InformationalVersion} `
          /p:FileVersion=${env:GitVersion_AssemblySemFileVer} `
          /p:PackageVersion=${env:GitVersion_NuGetVersionV2} `
          /p:RepositoryUrl="${env:GITHUB_SERVER_URL}/${env:GITHUB_REPOSITORY}.git" `
          /p:PackageProjectUrl="${env:GITHUB_SERVER_URL}/${env:GITHUB_REPOSITORY}" `
          IKVM.artifacts.msbuildproj
    - name: Upload NuGet Packages
      uses: actions/upload-artifact@v3
      with:
        name: nuget
        path: build/nuget
    - name: Upload Binaries
      uses: actions/upload-artifact@v3
      with:
        name: bin
        path: build/bin
    - name: Upload Tools
      uses: actions/upload-artifact@v3
      with:
        name: tools
        path: build/tools
    - name: Upload Tests
      uses: actions/upload-artifact@v3
      with:
        name: tests
        path: build/tests
  test-ikvm-windows:
    name: Test IKVM (Windows)
    needs:
    - build-ikvm
    runs-on: windows-latest
    steps:
    - name: Setup .NET 3.1
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 5.0
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 5.0.x
    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Download IKVM Tests
      uses: actions/download-artifact@v3
      with:
        name: tests
        path: build/tests
    - name: Run Tests
      shell: pwsh
      run: gi .\build\tests\**\*.Tests.dll | group { $_.Directory.BaseName } | %{ dotnet test $_.Group --blame -v 3 --results-directory .\TestResults --logger "trx;LogFileName=$($_.Name).trx" }
    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      with:
        name: TestResults-windows
        path: TestResults
  test-ikvm-linux:
    name: Test IKVM (Linux)
    needs:
    - build-ikvm
    runs-on: ubuntu-latest
    steps:
    - name: Setup .NET 3.1
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 5.0
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 5.0.x
    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Download IKVM Tests
      uses: actions/download-artifact@v3
      with:
        name: tests
        path: build/tests
    - name: Run Tests
      shell: pwsh
      run: gi ./build/tests/**/*.Tests.dll | group { $_.Directory.BaseName } | %{ dotnet test $_.Group --blame -v 3 --results-directory ./TestResults --logger "trx;LogFileName=$($_.Name).trx" }
    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      with:
        name: TestResults-linux
        path: TestResults
  release:
    name: Release
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    needs:
    - test-ikvm-windows
    - test-ikvm-linux
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Source
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.13
      with:
        versionSpec: 5.x
    - name: Execute GitVersion
      id: GitVersion
      uses: gittools/actions/gitversion/execute@v0.9.13
      with:
        useConfigFile: true
    - name: Download NuGet Packages
      uses: actions/download-artifact@v3
      with:
        name: nuget
        path: build/nuget
    - name: Download Binaries
      uses: actions/download-artifact@v3
      with:
        name: bin
        path: build/bin
    - name: Compress Binaries
      shell: pwsh
      run: cd build && gi bin/* | %{ $tfm = $_.Name; Push-Location "bin/$tfm"; zip -r "../IKVM-${env:GitVersion_SemVer}-bin-$tfm.zip" .; Pop-Location }
    - name: Download Tools
      uses: actions/download-artifact@v3
      with:
        name: tools
        path: build/tools
    - name: Compress Tools
      shell: pwsh
      run: cd build && gi tools/*/* | group { $_.Parent.Name } | %{ $tfm = $_.Name; $_.Group | %{ $rid=$_.Name; Push-Location "tools/$tfm/$rid"; zip -r "../../IKVM-${env:GitVersion_SemVer}-tools-$tfm-$rid.zip" .; Pop-Location  } }
    - name: Create Release
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.event.head_commit.message == '+prerelease'
      uses: ncipollo/release-action@v1.10.0
      with:
        tag: ${{ steps.GitVersion.outputs.semVer }}
        artifacts: build/bin/*.zip,build/nuget/*.nupkg,build/nuget/*.snupkg,build/tools/*.zip
        draft: true
        generateReleaseNotes: true
        prerelease: ${{ github.ref == 'refs/heads/develop' }}
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Push NuGet (GitHub)
      shell: pwsh
      run: dotnet nuget push build/nuget/*.nupkg --source $env:GITHUB_REPOS --api-key $env:GITHUB_TOKEN --skip-duplicate --no-symbols
      env:
        GITHUB_REPOS: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Push NuGet (Azure DevOps)
      shell: pwsh
      run: |
        dotnet nuget add source $env:AZUREDEVOPS_REPOS --name az --username az --password $env:AZUREDEVOPS_TOKEN --store-password-in-clear-text
        dotnet nuget push build/nuget/*.nupkg --source az --api-key az --skip-duplicate --no-symbols
      env:
        AZUREDEVOPS_REPOS: https://pkgs.dev.azure.com/ikvm-revived/ikvm/_packaging/ikvm-ci/nuget/v3/index.json
        AZUREDEVOPS_TOKEN: ${{ secrets.AZUREDEVOPS_PAT }}
    - name: Push NuGet
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.event.head_commit.message == '+prerelease'
      shell: pwsh
      run: dotnet nuget push build/nuget/*.nupkg --source $env:NUGET_REPOS --api-key $env:NUGET_TOKEN --skip-duplicate --no-symbols
      env:
        NUGET_REPOS: https://api.nuget.org/v3/index.json
        NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}
