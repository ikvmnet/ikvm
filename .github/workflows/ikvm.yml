name: IKVM

on:
  push:
    branches: [ openjdk_msbuild ]
  pull_request:
    branches: [ openjdk_msbuild ]

jobs:
  build-openjdk8:
    name: Build OpenJDK 8
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout Source
      uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Cache OpenJDK 8 Build
      uses: actions/cache@v3
      with:
        path: openjdk8/build/linux-x86_64-normal-server-release
        key: openjdk8-build-linux-x86_64-normal-server-release--${{ runner.os }}--${{ hashFiles('openjdk8/**', '!openjdk8/build') }}-4
    - name: Check OpenJDK 8 Build Stamp
      id: openjdk8-build-stamp
      uses: andstor/file-existence-action@v1
      with:
        files: openjdk8/build/linux-x86_64-normal-server-release/stamp
    - name: Fetch OpenJDK 7
      if: steps.openjdk8-build-stamp.outputs.files_exists != 'true'
      run: |
        mkdir -p openjdk8/build && 
        curl -o openjdk8/build/openjdk-7u75-b13-linux-x64-18_dec_2014.tar.gz "https://download.java.net/openjdk/jdk7u75/ri/openjdk-7u75-b13-linux-x64-18_dec_2014.tar.gz" &&
        tar xzvf openjdk8/build/openjdk-7u75-b13-linux-x64-18_dec_2014.tar.gz -C openjdk8/build
    - name: Build OpenJDK 8
      if: steps.openjdk8-build-stamp.outputs.files_exists != 'true'
      uses: docker://debian/eol:lenny
      with:
        args: >
          /bin/bash -c "
            echo 'deb http://archive.debian.org/debian/ lenny main' > /etc/apt/sources.list &&
            apt-get update &&
            apt-get install -y \
              build-essential \
              unzip \
              zip \
              curl \
              gcc-4.3 \
              g++-4.3 \
              libx11-dev \
              libxext-dev \
              libxrender-dev \
              libxtst-dev \
              libxt-dev \
              libxi-dev \
              libcups2-dev \
              libasound2-dev \
              libfreetype6-dev \
              libfontconfig1-dev &&
            cd openjdk8 &&
            JAVA_HOME=build/java-se-7u75-ri bash ./configure &&
            make DISABLE_HOTSPOT_OS_VERSION_CHECK=ok images &&
            touch build/linux-x86_64-normal-server-release/stamp"
    - name: Package OpenJDK 8
      run: |
        zip -r openjdk8-build-linux-x86_64-normal-server-release.zip \
          linux-x86_64-normal-server-release/langtools/gensrc \
          linux-x86_64-normal-server-release/corba/gensrc \
          linux-x86_64-normal-server-release/jdk/gensrc \
          linux-x86_64-normal-server-release/jdk/impsrc \
          linux-x86_64-normal-server-release/jdk/lib \
          linux-x86_64-normal-server-release/jdk/classes
      working-directory: openjdk8/build
    - name: Upload OpenJDK 8
      uses: actions/upload-artifact@v3
      with:
        name: openjdk8-build-linux-x86_64-normal-server-release
        path: openjdk8/build/openjdk8-build-linux-x86_64-normal-server-release.zip
  build-ikvm-windows:
    name: Build IKVM (Windows)
    needs:
      build-openjdk8
    runs-on: windows-latest
    steps:
    - name: Checkout Source
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.13
      with:
        versionSpec: 5.x
    - name: Execute GitVersion
      uses: gittools/actions/gitversion/execute@v0.9.13
      with:
        useConfigFile: true
    - name: Setup .NET 3.1
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Cache NuGet
      uses: actions/cache@v3
      with:
        path: ~\.nuget\packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**\*.csproj', '**\*.msbuildproj') }}
        restore-keys: ${{ runner.os }}-nuget-
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
    - name: Download OpenJDK 8 Build
      uses: actions/download-artifact@v2
      with:
        name: openjdk8-build-linux-x86_64-normal-server-release
        path: openjdk8/build
    - name: Restore OpenJDK 8 Build
      run: unzip -o openjdk8-build-linux-x86_64-normal-server-release.zip
      working-directory: openjdk8/build
    - name: NuGet Restore
      run: dotnet restore IKVM.sln
    - name: Build IKVM Artifacts
      run: |
        msbuild /m:1 `
          /p:Configuration="Release" `
          /p:Platform="Any CPU" `
          /p:Version=${env:GitVersion_FullSemVer} `
          /p:AssemblyVersion=${env:GitVersion_AssemblySemFileVer} `
          /p:AssemblyInformationalVersion=${env:GitVersion_InformationalVersion} `
          /p:FileVersion=${env:GitVersion_AssemblySemFileVer} `
          /p:PackageVersion=${env:GitVersion_NuGetVersionV2} `
          IKVM.artifacts.msbuildproj
    - name: Upload IKVM Packages
      uses: actions/upload-artifact@v3
      with:
        name: pkg
        path: build/pkg
    - name: Build IKVM Solution
      run: |
        msbuild /m:1 `
          /p:Configuration="Release" `
          /p:Platform="Any CPU" `
          /p:Version=${env:GitVersion_FullSemVer} `
          /p:AssemblyVersion=${env:GitVersion_AssemblySemFileVer} `
          /p:AssemblyInformationalVersion=${env:GitVersion_InformationalVersion} `
          /p:FileVersion=${env:GitVersion_AssemblySemFileVer} `
          /p:PackageVersion=${env:GitVersion_NuGetVersionV2} `
          IKVM.sln
    - name: Run IKVM Tests (Framework 4.5)
      uses: microsoft/vstest-action@v0.1.0
      with:
        testAssembly: |
          **\*.Tests.dll
          !**\obj\**
        searchFolder: ./
        runInParallel: true
        otherConsoleOptions: /Framework:Framework45
        resultLogsArtifactName: vs-test-result-logs-net461
    - name: Run IKVM Tests (Core 3.1)
      uses: microsoft/vstest-action@v0.1.0
      with:
        testAssembly: |
          **\*.Tests.dll
          !**\obj\**
        searchFolder: ./
        runInParallel: true
        otherConsoleOptions: /Framework:.NETCoreApp,Version=v3.1
        resultLogsArtifactName: vs-test-result-logs-netcoreapp3.1
    - name: Publish NuGet Packages To GitHub
      run: |
        dotnet nuget add source --username USERNAME --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${env:GITHUB_REPOSITORY_OWNER}/index.json"
        dotnet nuget push build\pkg\IKVM.*.nupkg --source github
        dotnet nuget push build\pkg\IKVM.*.snupkg --source github
