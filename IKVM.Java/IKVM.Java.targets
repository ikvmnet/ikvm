<Project>

    <PropertyGroup>
        <JavaSourceTemplateOutputPath>$(IntermediateOutputPath)src\</JavaSourceTemplateOutputPath>
        <JavaResourceTemplateOutputPath>$(IntermediateOutputPath)res\</JavaResourceTemplateOutputPath>
        <RefStubsOutputPath>$(IntermediateOutputPath)refstubs\</RefStubsOutputPath>
        <JavaClassOutputPath>$(IntermediateOutputPath)classes\</JavaClassOutputPath>
        <RmiStubsOutputPath>$(IntermediateOutputPath)rmistubs\</RmiStubsOutputPath>

        <JavaAssemblyName>$(AssemblyName).java.dll</JavaAssemblyName>
        <JavaDebugSymbolsName>$(AssemblyName).java.pdb</JavaDebugSymbolsName>
        <JavaAssemblyPath>$(IntermediateOutputPath)$(JavaAssemblyName)</JavaAssemblyPath>
        <JavaDebugSymbolsPath>$(IntermediateOutputPath)$(JavaDebugSymbolsName)</JavaDebugSymbolsPath>
    </PropertyGroup>

    <ItemGroup>
        <UpToDateCheckInput Include="@(JavaSource)" />
        <UpToDateCheckInput Include="@(JavaSourceTemplate)" />
        <UpToDateCheckInput Include="@(JavaResource)" />
        <UpToDateCheckInput Include="@(JavaResourceTemplate)" />
        <UpToDateCheckInput Include="@(OpenJdkSource)" />
        <UpToDateCheckInput Include="@(OpenJdkResource)" />
        <UpToDateCheckInput Include="@(IkvmMapFile)" />
    </ItemGroup>

    <UsingTask TaskName="TransformTemplates" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <Variables ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.Text.RegularExpressions" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                foreach (var item in Items)
                {
                    var fullPath = item.GetMetadata("FullPath");
                    if (File.Exists(fullPath) == false)
                        throw new FileNotFoundException(fullPath);
                    
                    var destPath = item.GetMetadata("TargetPath");
                    Directory.CreateDirectory(Path.GetDirectoryName(destPath));
                    
                    var fileText = File.ReadAllText(fullPath);
                    foreach (var variable in Variables)
                    {
                        var n = variable.ItemSpec;
                        var v = variable.GetMetadata("Value");
                        fileText = fileText.Replace("@@" + n + "@@", v);
                    }
                    
                    File.WriteAllText(destPath, fileText);
                }
            ]]>
            </Code>
        </Task>
    </UsingTask>

    <UsingTask TaskName="DistinctSourceItems" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Source ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <Output ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                var ls = new List<ITaskItem>();
                var hs = new HashSet<string>();
                foreach (var i in Source)
                {
                    var key = i.GetMetadata("UniqueKey");
                    if (string.IsNullOrEmpty(key) || hs.Add(key))
                        ls.Add(i);
                }
                
                Output = ls.ToArray();
            ]]>
            </Code>
        </Task>
    </UsingTask>

    <UsingTask TaskName="SortItems" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Source ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <Output ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.Linq" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                Output = Source.OrderBy(i => i.ItemSpec).ToArray();
            ]]>
            </Code>
        </Task>
    </UsingTask>

    <UsingTask TaskName="GetMetadataTask" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <MetadataString Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                var command = new StringBuilder();
                
                foreach (var item in Items)
                {
                    command.AppendFormat("ItemName={0}\r\n", item);
                    foreach (string parameter in item.MetadataNames)
                        command.AppendFormat("  {0}={1}\r\n", parameter, item.GetMetadata(parameter));
                        
                    command.AppendFormat("\r\n");
                }
                
                MetadataString = command.ToString();
      ]]>
            </Code>
        </Task>
    </UsingTask>

    <PropertyGroup>
        <JavaAssemblyInfoFile>$(IntermediateOutputPath)$(MSBuildThisFile).AssemblyInfo.java</JavaAssemblyInfoFile>
    </PropertyGroup>

    <Target Name="GenerateJavaAssemblyInfo" DependsOnTargets="GetAssemblyAttributes;CreateGeneratedAssemblyInfoInputsCacheFile" Inputs="$(GeneratedAssemblyInfoInputsCacheFile)" Outputs="$(JavaAssemblyInfoFile)">
        <ItemGroup>
            <Compile Remove="$(JavaAssemblyInfoFile)" />
            <JavaAssemblyAttribute Include="@(AssemblyAttribute)" />
        </ItemGroup>
        <ItemGroup>
            <_JavaAssemblyAttribute Include="@(JavaAssemblyAttribute)" Condition=" '%(Identity)' == 'System.Runtime.CompilerServices.InternalsVisibleTo' " />
            
            <!-- InternalsVisibleTo needs to be renamed with Attribute suffix -->
            <JavaAssemblyAttribute Remove="System.Runtime.CompilerServices.InternalsVisibleTo" />
            <JavaAssemblyAttribute Include="@(_JavaAssemblyAttribute->'System.Runtime.CompilerServices.InternalsVisibleToAttribute')" Condition=" '%(Identity)' == 'System.Runtime.CompilerServices.InternalsVisibleTo' " />
        
            <!-- #55 not emitted by stub generator -->
            <JavaAssemblyAttribute Remove="System.Reflection.AssemblyMetadataAttribute" />

            <!-- Required by Roslyn -->
            <JavaAssemblyAttribute Include="System.Runtime.CompilerServices.ExtensionAttribute" />
        </ItemGroup>
        <ItemGroup>
            <_JavaAssemblyInfoLine Include="@cli.System.Runtime.Versioning.TargetFrameworkAttribute.Annotation(&quot;$(TargetFrameworkIdentifier),Version=$(TargetFrameworkVersion)&quot;)" />
            <_JavaAssemblyInfoLine Include="@(JavaAssemblyAttribute->'@cli.%(Identity).Annotation')" Condition=" '%(JavaAssemblyAttribute._Parameter1)' == '' And '%(JavaAssemblyAttribute._Parameter2)' == '' And '%(JavaAssemblyAttribute._Parameter3)' == '' " />
            <_JavaAssemblyInfoLine Include="@(JavaAssemblyAttribute->'@cli.%(Identity).Annotation(&quot;%(_Parameter1)&quot;)')" Condition=" '%(JavaAssemblyAttribute._Parameter1)' != '' And '%(JavaAssemblyAttribute._Parameter2)' == '' And '%(JavaAssemblyAttribute._Parameter3)' == '' " />
            <_JavaAssemblyInfoLine Include="@(JavaAssemblyAttribute->'@cli.%(Identity).Annotation(&quot;%(_Parameter1)&quot;, &quot;%(_Parameter2)&quot;)')" Condition=" '%(JavaAssemblyAttribute._Parameter1)' != '' And '%(JavaAssemblyAttribute._Parameter2)' != '' And '%(JavaAssemblyAttribute._Parameter3)' == '' " />
            <_JavaAssemblyInfoLine Include="@(JavaAssemblyAttribute->'@cli.%(Identity).Annotation(&quot;%(_Parameter1)&quot;, &quot;%(_Parameter2)&quot;, &quot;%(_Parameter3)&quot;)')" Condition=" '%(JavaAssemblyAttribute._Parameter1)' != '' And '%(JavaAssemblyAttribute._Parameter2)' != '' And '%(JavaAssemblyAttribute._Parameter3)' != '' " />
            <_JavaAssemblyInfoLine Include="interface CompilerAssemblyInfo {}" />
        </ItemGroup>
        <WriteLinesToFile File="$(JavaAssemblyInfoFile)" Lines="@(_JavaAssemblyInfoLine)" Overwrite="true" WriteOnlyWhenDifferent="true" />
        <ItemGroup>
            <JavaSource Include="$(JavaAssemblyInfoFile)" PackagePath="CompilerAssemblyInfo" AssemblyAttributes="true" />
        </ItemGroup>
        <ItemGroup>
            <FileWrites Include="$(JavaAssemblyInfoFile)" />
        </ItemGroup>
    </Target>

    <Target Name="GetIkvmStubExe" DependsOnTargets="ResolveProjectReferences">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="Build" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)" Condition=" '%(_MSBuildProjectReferenceExistent.IsIkvmStub)' == 'true' ">
            <Output TaskParameter="TargetOutputs" ItemName="_IkvmStub" />
        </MSBuild>
        <PropertyGroup>
            <IkvmStub>@(_IkvmStub)</IkvmStub>
        </PropertyGroup>
        <Message Text="Using ikvmstub executable at '$(IkvmStub)'." />
    </Target>

    <Target Name="ResolveRefStubs" DependsOnTargets="ResolveReferences;FindReferenceAssembliesForReferences">
        <PropertyGroup>
            <_RefStubAssemblyNames>@(RefStubAssembly->';%(Identity);')</_RefStubAssemblyNames>
        </PropertyGroup>
        <ItemGroup>
            <RefStub Include="@(ReferencePathWithRefAssemblies->Distinct()->'$(RefStubsOutputPath)%(Filename).jar')" Condition="$(_RefStubAssemblyNames.Contains(';%(Filename);'))">
                <AssemblyFile>%(Identity)</AssemblyFile>
            </RefStub>
        </ItemGroup>
    </Target>

    <UsingTask TaskName="CalculateMD5ForRefStubs" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Source ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <Output ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Security.Cryptography" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                Output = Source;
                
                using var md5 = MD5.Create();
                for (int i = 0; i < Output.Length; i++)
                {
                    var jarFile = Output[i].ItemSpec;
                    if (File.Exists(jarFile))
                    {
                        using var stm = File.OpenRead(jarFile);
                        var hsh = md5.ComputeHash(stm);
                        var bld = new StringBuilder(hsh.Length * 2);
                        foreach (var b in hsh)
                            bld.Append(b.ToString("x2"));
                            
                        Output[i].SetMetadata("FileHash", bld.ToString());
                    }
                    
                    var tmpFile = Output[i].GetMetadata("TmpFile");
                    if (File.Exists(tmpFile))
                    {
                        using var stm = File.OpenRead(tmpFile);
                        var hsh = md5.ComputeHash(stm);
                        var bld = new StringBuilder(hsh.Length * 2);
                        foreach (var b in hsh)
                            bld.Append(b.ToString("x2"));
                            
                        Output[i].SetMetadata("TmpFileHash", bld.ToString());
                    }
                }
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <PropertyGroup>
        <_BuildRefStubsStateFile>$(IntermediateOutputPath)$(MSBuildThisFile).BuildRefStubs.state</_BuildRefStubsStateFile>
        <_BuildRefStubsStateStampFile>$(IntermediateOutputPath)$(MSBuildThisFile).BuildRefStubsState.stamp</_BuildRefStubsStateStampFile>
        <_BuildRefStubsCoreStampFile>$(IntermediateOutputPath)$(MSBuildThisFile).BuildRefStubsCore.stamp</_BuildRefStubsCoreStampFile>
    </PropertyGroup>

    <Target Name="BuildRefStubsState" DependsOnTargets="GetIkvmStubExe;ResolveRefStubs" Inputs="$(IkvmStub);@(JavaClasspathItem);@(JavaSourceItems);@(ReferencePathWithRefAssemblies);@(RefStub->'%(AssemblyFile)')" Outputs="$(_BuildRefStubsStateStampFile)">
        <ItemGroup>
            <_BuildRefStubsInputs Include="$(IkvmStub)" />
            <_BuildRefStubsInputs Include="@(ReferencePathWithRefAssemblies->Distinct())" />
            <_BuildRefStubsInputs Include="@(RefStub->Distinct()->'%(AssemblyFile)')" />
        </ItemGroup>
        <SortItems Source="@(_BuildRefStubsInputs)">
            <Output TaskParameter="Output" ItemName="_BuildRefStubsInputsSorted" />
        </SortItems>
        <GetFileHash Files="@(_BuildRefStubsInputsSorted)">
            <Output TaskParameter="Items" ItemName="_BuildRefStubsInputsWithHash" />
        </GetFileHash>
        <ItemGroup>
            <_BuildRefStubsInputsStateLine Include="@(_BuildRefStubsInputsWithHash->Distinct()->'%(FileHash) %(Identity)')" />
        </ItemGroup>
        <WriteLinesToFile File="$(_BuildRefStubsStateFile)" Lines="@(_BuildRefStubsInputsStateLine)" Overwrite="true" WriteOnlyWhenDifferent="true" />

        <Touch Files="$(_BuildRefStubsStateStampFile)" AlwaysCreate="true" ForceTouch="true" />
        <ItemGroup>
            <FileWrites Include="$(_BuildRefStubsStateStampFile)" />
            <FileWrites Include="$(_BuildRefStubsStateFile)" />
        </ItemGroup>
    </Target>

    <Target Name="BuildRefStubsCore" DependsOnTargets="BuildRefStubsState;GetIkvmStubExe;ResolveRefStubs" Inputs="$(_BuildRefStubsStateFile)" Outputs="$(_BuildRefStubsCoreStampFile)">
        <!--
        Because the Java compilation takes a significant amount of time we attempt to preserve incremental builds by
        not updating reference stubs unless necessary. Because the ikvmstub utility produces deterministic output, we
        can calculate the hash of the new reference stubs vs the old reference stubs, and skip moving the file into
        place if they match. These almost never actually change.
        -->

        <ItemGroup>
            <_RefStubWorkItem Include="@(RefStub)" Condition=" '%(Identity)' != '' ">
                <TmpFile>$(RefStubsOutputPath)tmp\$([System.IO.Path]::GetRandomFileName())</TmpFile>
            </_RefStubWorkItem>
        </ItemGroup>

        <PropertyGroup>
            <_RefStubArgs>@(ReferencePathWithRefAssemblies->Distinct()->'-r:"%(Identity)"', ' ')</_RefStubArgs>
        </PropertyGroup>

        <MakeDir Directories="$(RefStubsOutputPath);$(RefStubsOutputPath)tmp" />
        <Message Text="$(_IkvmToolExecPrefix)$(IkvmStub) -bootstrap &quot;%(_RefStubWorkItem.AssemblyFile)&quot; $(_RefStubArgs) -out:&quot;%(TmpFile)&quot;" />
        <Exec Command="$(_IkvmToolExecPrefix)$(IkvmStub) -bootstrap &quot;%(_RefStubWorkItem.AssemblyFile)&quot; $(_RefStubArgs) -out:&quot;%(TmpFile)&quot;" />

        <CalculateMD5ForRefStubs Source="@(_RefStubWorkItem)">
            <Output TaskParameter="Output" ItemName="_RefStubWorkItemWithHash" />
        </CalculateMD5ForRefStubs>
        <ItemGroup>
            <_RefStubWorkItemToMove Include="@(_RefStubWorkItemWithHash)" Condition=" '%(TmpFileHash)' != '%(_RefStubWorkItemWithHash.FileHash)' " />
        </ItemGroup>
        <Move SourceFiles="@(_RefStubWorkItemToMove->'%(TmpFile)')" DestinationFiles="@(_RefStubWorkItemToMove)" />
        <RemoveDir Directories="$(RefStubsOutputPath)tmp" />

        <Touch Files="$(_BuildRefStubsCoreStampFile)" AlwaysCreate="true" ForceTouch="true" />
        <ItemGroup>
            <FileWrites Include="$(_BuildRefStubsCoreStampFile)" />
            <FileWrites Include="@(RefStub)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <BuildRefStubsDependsOn>
            $(BuildRefStubsDependsOn);
            GetIkvmStubExe;
            ResolveReferences;
            FindReferenceAssembliesForReferences;
            ResolveRefStubs;
            BuildRefStubsState;
            BuildRefStubsCore;
        </BuildRefStubsDependsOn>
    </PropertyGroup>

    <Target Name="BuildRefStubs" DependsOnTargets="$(BuildRefStubsDependsOn)">

    </Target>

    <Target Name="CleanRefStubs">
        <Delete Files="$(IntermediateOutputPath)$(MSBuildThisFile).BuildRefStubsState.stamp" />
        <Delete Files="$(BuildRefStubsStateFile)" />
        <Delete Files="$(IntermediateOutputPath)$(MSBuildThisFile).BuildRefStubsCore.stamp" />
        <RemoveDir Directories="$(RefStubsOutputPath)" />
    </Target>

    <PropertyGroup>
        <CleanDependsOn>
            $(CleanDependsOn);
            CleanRefStubs;
        </CleanDependsOn>
    </PropertyGroup>

    <Target Name="ResolveTransformTemplateVariables">
        <ItemGroup>
            <TransformTemplateVariables Include="OpenJdkImplementationVersion" Value="$(OpenJdkImplementationVersion)" />
            <TransformTemplateVariables Include="OpenJdkSpecificationVersion" Value="$(OpenJdkSpecificationVersion)" />
            <TransformTemplateVariables Include="OpenJdkFullVersion" Value="$(OpenJdkFullVersion)" />
            <TransformTemplateVariables Include="OpenJdkVersion" Value="$(OpenJdkVersion)" />
            <TransformTemplateVariables Include="Version" Value="$(Version)" />
            <TransformTemplateVariables Include="FileVersion" Value="$(FileVersion)" />
        </ItemGroup>
    </Target>

    <Target Name="ResolveTransformJavaSourceTemplates">
        <ItemGroup>
            <TransformJavaSourceTemplate Include="@(JavaSourceTemplate)">
                <TargetPath>$(JavaSourceTemplateOutputPath)\$([System.String]::new('%(SourcePath)').Replace('/', '\'))</TargetPath>
            </TransformJavaSourceTemplate>
        </ItemGroup>
    </Target>

    <Target Name="TransformJavaSourceTemplates" DependsOnTargets="ResolveTransformJavaSourceTemplates" Inputs="@(TransformJavaSourceTemplate)" Outputs="@(TransformJavaSourceTemplate->'%(TargetPath)')">
        <MakeDir Directories="$(JavaSourceTemplateOutputPath)" />
        <TransformTemplates Items="@(TransformJavaSourceTemplate)" Variables="@(TransformTemplateVariables)" />
        <ItemGroup>
            <JavaSourceTemplateItem Include="@(TransformJavaSourceTemplate->'%(TargetPath)')" />
            <FileWrites Include="@(TransformJavaSourceTemplate->'%(TargetPath)')" />
        </ItemGroup>
    </Target>

    <Target Name="CleanJavaSourceTemplates">
        <RemoveDir Directories="$(JavaSourceTemplateOutputPath)" />
    </Target>

    <PropertyGroup>
        <CleanDependsOn>
            $(CleanDependsOn);
            CleanJavaSourceTemplates;
        </CleanDependsOn>
    </PropertyGroup>

    <Target Name="ResolveJavaSourceItemsCore" DependsOnTargets="$(TransformJavaSourceTemplates)">
        <ItemGroup>
            <_JavaSourceItems Include="@(JavaSourceTemplateItem)" UniqueKey="%(PackagePath)" />
            <_JavaSourceItems Include="@(JavaSource)" UniqueKey="%(PackagePath)" />
            <_JavaSourceItems Include="@(OpenJdkSource)" UniqueKey="%(OpenJdkSource.PackagePath)" />
        </ItemGroup>
        <DistinctSourceItems Source="@(_JavaSourceItems)">
            <Output TaskParameter="Output" ItemName="_JavaSourceItemsDistinct" />
        </DistinctSourceItems>
        <ItemGroup>
            <JavaSourceItems Include="@(_JavaSourceItemsDistinct)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <ResolveJavaSourceItemsDependsOn>
            $(ResolveJavaSourceItemsDependsOn);
            GenerateJavaAssemblyInfo;
            ResolveTransformJavaSourceTemplates;
            ResolveTransformTemplateVariables;
            TransformJavaSourceTemplates;
            ResolveJavaSourceItemsCore;
        </ResolveJavaSourceItemsDependsOn>
    </PropertyGroup>

    <Target Name="ResolveJavaSourceItems" DependsOnTargets="$(ResolveJavaSourceItemsDependsOn)">

    </Target>

    <Target Name="ResolveTransformJavaResourceTemplates">
        <ItemGroup>
            <TransformJavaResourceTemplate Include="@(JavaResourceTemplate)">
                <TargetPath>$(JavaResourceTemplateOutputPath)\$([System.String]::new('%(ResourcePath)').Replace('/', '\'))</TargetPath>
            </TransformJavaResourceTemplate>
        </ItemGroup>
    </Target>

    <Target Name="TransformJavaResourceTemplates" DependsOnTargets="ResolveTransformJavaResourceTemplates" Inputs="@(TransformJavaResourceTemplate)" Outputs="@(TransformJavaResourceTemplate->'%(TargetPath)')">
        <MakeDir Directories="$(JavaResourceTemplateOutputPath)" />
        <TransformTemplates Items="@(TransformJavaResourceTemplate)" Variables="@(TransformTemplateVariables)" />
        <ItemGroup>
            <JavaResourceTemplateItem Include="@(TransformJavaResourceTemplate->'%(TargetPath)')" ResourcePath="%(ResourcePath)" />
            <FileWrites Include="@(TransformJavaResourceTemplate->'%(TargetPath)')" />
        </ItemGroup>
    </Target>

    <Target Name="CleanJavaResourceTemplates">
        <Delete Files="$(JavaResourceTemplateOutputPath)\**\*" />
        <RemoveDir Directories="$(JavaResourceTemplateOutputPath)" />
    </Target>

    <PropertyGroup>
        <CleanDependsOn>
            $(CleanDependsOn);
            CleanJavaResourceTemplates;
        </CleanDependsOn>
    </PropertyGroup>

    <Target Name="ResolveJavaResourceItemsCore" DependsOnTargets="TransformJavaResourceTemplates">
        <ItemGroup>
            <_JavaResourceItems Include="@(JavaResourceTemplateItem)" UniqueKey="%(ResourcePath)" />
            <_JavaResourceItems Include="@(JavaResource)" UniqueKey="%(ResourcePath)" />
            <_JavaResourceItems Include="@(OpenJdkResource)" UniqueKey="%(OpenJdkResource.ResourcePath)" />
        </ItemGroup>
        <DistinctSourceItems Source="@(_JavaResourceItems)">
            <Output TaskParameter="Output" ItemName="_JavaResourceItemsDistinct" />
        </DistinctSourceItems>
        <ItemGroup>
            <JavaResourceItems Include="@(_JavaResourceItemsDistinct)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <ResolveJavaResourceItemsDependsOn>
            $(ResolveJavaResourceItemsDependsOn);
            ResolveTransformJavaResourceTemplates;
            ResolveTransformTemplateVariables;
            TransformJavaResourceTemplates;
            ResolveJavaResourceItemsCore;
        </ResolveJavaResourceItemsDependsOn>
    </PropertyGroup>

    <Target Name="ResolveJavaResourceItems" DependsOnTargets="$(ResolveJavaResourceItemsDependsOn)">

    </Target>

    <Target Name="ResolveJavaClasspath" DependsOnTargets="BuildRefStubs">
        <ItemGroup>
            <JavaClasspath Include="@(RefStub)" />
            <JavaClasspath Include="@(OpenJdkClasspath)" />
            <JavaClasspathItem Include="@(RefStub)" />
            <JavaClasspathItem Include="@(OpenJdkClasspath)" Condition=" '%(Extension)' == '.jar' " />
            <JavaClasspathItem Include="%(OpenJdkClasspath.Identity)\**\*.class" Condition=" '%(Extension)' != '.jar' " />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <_BuildJavaClassesStateFile>$(IntermediateOutputPath)$(MSBuildThisFile).BuildJavaClasses.state</_BuildJavaClassesStateFile>
        <_BuildJavaClassesStateStampFile>$(IntermediateOutputPath)$(MSBuildThisFile).BuildJavaClassesState.stamp</_BuildJavaClassesStateStampFile>
    </PropertyGroup>

    <Target Name="BuildJavaClassesState" DependsOnTargets="ResolveJavaSourceItems;ResolveJavaClasspath" Inputs="@(JavaClasspathItem);@(JavaSourceItems)" Outputs="$(_BuildJavaClassesStateStampFile)">
        <ItemGroup>
            <_BuildJavaClassesInputs Include="@(JavaClasspathItem->'%(FullPath)')" />
            <_BuildJavaClassesInputs Include="@(JavaSourceItems->'%(FullPath)')" />
        </ItemGroup>
        <SortItems Source="@(_BuildJavaClassesInputs)">
            <Output TaskParameter="Output" ItemName="_BuildJavaClassesInputsSorted" />
        </SortItems>
        <GetFileHash Files="@(_BuildJavaClassesInputsSorted)">
            <Output TaskParameter="Items" ItemName="_BuildJavaClassesInputsWithHash" />
        </GetFileHash>
        <ItemGroup>
            <_BuildJavaClassesInputsStateLine Include="@(OpenJdkExcludeRegex)" />
            <_BuildJavaClassesInputsStateLine Include="$(DebugSymbols)" />
            <_BuildJavaClassesInputsStateLine Include="$(AssemblyName)" />
            <_BuildJavaClassesInputsStateLine Include="@(_BuildJavaClassesInputsWithHash->'%(FileHash) %(Identity)')" />
        </ItemGroup>
        <WriteLinesToFile File="$(_BuildJavaClassesStateFile)" Lines="@(_BuildJavaClassesInputsStateLine)" Overwrite="true" WriteOnlyWhenDifferent="true" />

        <Touch Files="$(_BuildJavaClassesStateStampFile)" AlwaysCreate="true" ForceTouch="true" />
        <ItemGroup>
            <FileWrites Include="$(_BuildJavaClassesStateStampFile)" />
            <FileWrites Include="$(_BuildJavaClassesStateFile)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <_BuildJavaClassesCoreStampFile>$(IntermediateOutputPath)$(MSBuildThisFile).BuildJavaClassesCore.stamp</_BuildJavaClassesCoreStampFile>
        <_BuildJavaClassesCoreJavacArgFile>$(IntermediateOutputPath)$(MSBuildThisFile).BuildJavaClasses.javac.args.txt</_BuildJavaClassesCoreJavacArgFile>
    </PropertyGroup>

    <Target Name="GetJavacExe">
        <PropertyGroup>
            <Javac>javac</Javac>
            <JavacArgs>-J-Xmx1536M</JavacArgs>
        </PropertyGroup>
    </Target>

    <Target Name="BuildJavaClassesCore" DependsOnTargets="GetJavacExe;BuildJavaClassesState;ResolveJavaSourceItems;ResolveJavaClasspath" Inputs="$(_BuildJavaClassesStateFile)" Outputs="$(_BuildJavaClassesCoreStampFile)">
        <ItemGroup>
            <_JavacArgs Include="-g" Condition=" '$(DebugSymbols)' == 'true' Or '$(DebugType)' != 'none' "/>
            <_JavacArgs Include="-nowarn" />
            <_JavacArgs Include="-implicit:none" />
            <_JavacArgs Include="-parameters" />
            <_JavacArgs Include="-cp" />
            <_JavacArgs Include="dummy" />
            <_JavacArgs Include="-bootclasspath" />
            <_JavacArgs Include="@(JavaClasspath, '$([System.IO.Path]::PathSeparator)')" />
            <_JavacArgs Include="-source" />
            <_JavacArgs Include="1.8" />
            <_JavacArgs Include="-target" />
            <_JavacArgs Include="1.8" />
            <_JavacArgs Include="-d" />
            <_JavacArgs Include="$(JavaClassOutputPath)" />
            <_JavacArgs Include="@(JavaSourceItems->'%(FullPath)')" />
        </ItemGroup>
        <WriteLinesToFile File="$(_BuildJavaClassesCoreJavacArgFile)" Lines="@(_JavacArgs)" Overwrite="true" />

        <Delete Files="$(JavaClassOutputPath)**\*" />
        <MakeDir Directories="$(JavaClassOutputPath)" />
        <Message Text="Beginning compilation of Java classes for OpenJDK..." Importance="high" />
        <Message Text="$(Javac) $(JavacArgs) @(_JavacArgs, ' ')" />
        <Exec Command="$(Javac) $(JavacArgs) @$(_BuildJavaClassesCoreJavacArgFile)" />
        <Message Text="Finished compilation of Java classes for OpenJDK." Importance="high" />

        <Touch Files="$(_BuildJavaClassesCoreStampFile)" AlwaysCreate="true" ForceTouch="true" />
        <ItemGroup>
            <FileWrites Include="$(_BuildJavaClassesCoreStampFile)" />
            <FileWrites Include="$(_BuildJavaClassesCoreJavacArgFile)" />
            <FileWrites Include="$(JavaClassOutputPath)\**\*.class" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <BuildJavaClassesDependsOn>
            $(BuildJavaClassesDependsOn)
            ResolveJavaSourceItems;
            ResolveJavaClasspath;
            BuildJavaClassesState;
            BuildJavaClassesCore;
        </BuildJavaClassesDependsOn>
    </PropertyGroup>

    <Target Name="BuildJavaClasses" DependsOnTargets="$(BuildJavaClassesDependsOn)">

    </Target>

    <Target Name="CleanJavaClasses">
        <Delete Files="$(_BuildJavaClassesStateStampFile)" />
        <Delete Files="$(_BuildJavaClassesStateFile)" />
        <Delete Files="$(_BuildJavaClassesCoreStampFile)" />
        <Delete Files="$(_BuildJavaClassesCoreJavacArgFile)" />
        <RemoveDir Directories="$(JavaClassOutputPath)" />
    </Target>

    <PropertyGroup>
        <CleanDependsOn>
            $(CleanDependsOn);
            CleanJavaClasses;
        </CleanDependsOn>
    </PropertyGroup>

    <Target Name="ResolveRmiStubInputItems" DependsOnTargets="BuildJavaClasses">
        <ItemGroup>
            <RmiStubInputItem Include="@(JavaClasspathItem)" />
            <RmiStubInputItem Include="$(JavaClassOutputPath)**\*.class" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <_BuildRmiStubsCoreStampFile>$(IntermediateOutputPath)$(MSBuildThisFile).BuildRmiStubsCore.stamp</_BuildRmiStubsCoreStampFile>
    </PropertyGroup>

    <Target Name="GetRmicExe">
        <PropertyGroup>
            <Rmic>rmic</Rmic>
        </PropertyGroup>
    </Target>

    <Target Name="BuildRmiStubsCore" DependsOnTargets="GetRmicExe;ResolveRmiStubInputItems" Inputs="@(RmiStubInputItem)" Outputs="$(_BuildRmiStubsCoreStampFile)">
        <ItemGroup>
            <_RmicClasspath Include="@(JavaClasspath);$(JavaClassOutputPath)" />
            <_RmicArgs Include="-J-client" />
            <_RmicArgs Include="-J-Xms128m" />
            <_RmicArgs Include="-nowarn" />
            <_RmicArgs Include="-bootclasspath" />
            <_RmicArgs Include="@(_RmicClasspath, '$([System.IO.Path]::PathSeparator)')" />
            <_RmicArgs Include="-d" />
            <_RmicArgs Include="$(RmiStubsOutputPath)" />
        </ItemGroup>
        <PropertyGroup>
            <_RmicArgs>@(_RmicArgs, ' ')</_RmicArgs>
        </PropertyGroup>

        <Delete Files="$(RmiStubsOutputPath)**\*" />
        <MakeDir Directories="$(RmiStubsOutputPath)" />
        <Exec Command="$(Rmic) $(_RmicArgs) %(OpenJdkRmiStub.Flags) %(OpenJdkRmiStub.Identity)" />

        <Touch Files="$(_BuildRmiStubsCoreStampFile)" AlwaysCreate="true" ForceTouch="true" />
        <ItemGroup>
            <FileWrites Include="$(_BuildRmiStubsCoreStampFile)" />
            <FileWrites Include="$(RmiStubsOutputPath)**\*.class" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <BuildRmiStubsDependsOn>
            $(BuildRmiStubsDependsOn)
            ResolveRmiStubInputItems;
            BuildRmiStubsCore;
        </BuildRmiStubsDependsOn>
    </PropertyGroup>

    <Target Name="BuildRmiStubs" DependsOnTargets="$(BuildRmiStubsDependsOn)">

    </Target>

    <Target Name="CleanRmiStubs">
        <Delete Files="$(_BuildRmiStubsCoreStampFile)" />
        <RemoveDir Directories="$(RmiStubsOutputPath)" />
    </Target>

    <PropertyGroup>
        <CleanDependsOn>
            $(CleanDependsOn);
            CleanRmiStubs;
        </CleanDependsOn>
    </PropertyGroup>

    <Target Name="GetIkvmcExe" DependsOnTargets="ResolveProjectReferences">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="Build" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)" Condition=" '%(_MSBuildProjectReferenceExistent.IsIkvmc)' == 'true' ">
            <Output TaskParameter="TargetOutputs" ItemName="_Ikvmc" />
        </MSBuild>
        <PropertyGroup>
            <Ikvmc>@(_Ikvmc)</Ikvmc>
        </PropertyGroup>
        <Message Text="Using ikvmc executable at '$(Ikvmc)'." Importance="high" />
    </Target>

    <Target Name="GetIkvmRuntimeDll" DependsOnTargets="ResolveProjectReferences">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="Build" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)" Condition=" '%(_MSBuildProjectReferenceExistent.IsIkvmRuntimeDll)' == 'true' ">
            <Output TaskParameter="TargetOutputs" ItemName="_IkvmRuntimeDll" />
        </MSBuild>
        <PropertyGroup>
            <IkvmRuntimeDll>@(_IkvmRuntimeDll)</IkvmRuntimeDll>
        </PropertyGroup>
    </Target>

    <Target Name="ResolveJavaClassItems" DependsOnTargets="BuildJavaClasses;BuildRmiStubs">
        <ItemGroup>
            <JavaClassItems Include="$(JavaClassOutputPath)**\*.class" />
            <JavaClassItems Include="$(RmiStubsOutputPath)**\*.class" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <_BuildJavaAssemblyStateFile>$(IntermediateOutputPath)$(MSBuildThisFile).BuildJavaAssembly.state</_BuildJavaAssemblyStateFile>
        <_BuildJavaAssemblyStateStampFile>$(IntermediateOutputPath)$(MSBuildThisFile).BuildJavaAssemblyState.stamp</_BuildJavaAssemblyStateStampFile>
    </PropertyGroup>

    <Target Name="BuildJavaAssemblyState" DependsOnTargets="GetIkvmcExe;GetIkvmRuntimeDll;ResolveJavaClassItems;ResolveJavaResourceItems;BuildRmiStubs" Inputs="@(JavaClassItems);@(JavaResourceItems);$(IkvmRuntimeDll);$(Ikvmc);@(ReferencePathWithRefAssemblies);@(IkvmMapFile)" Outputs="$(_BuildJavaAssemblyStateStampFile)">
        <ItemGroup>
            <_BuildJavaAssemblyInputs Include="$(Ikvmc)" />
            <_BuildJavaAssemblyInputs Include="$(IkvmRuntimeDll)" />
            <_BuildJavaAssemblyInputs Include="$(AssemblyOriginatorKeyFile)" Condition=" '$(SignAssembly)' == 'true' " />
            <_BuildJavaAssemblyInputs Include="@(ReferencePathWithRefAssemblies->Distinct())" />
            <_BuildJavaAssemblyInputs Include="@(JavaClassItems->Distinct())" />
            <_BuildJavaAssemblyInputs Include="@(JavaResourceItems->Distinct())" />
            <_BuildJavaAssemblyInputs Include="@(IkvmMapFile)" />
        </ItemGroup>
        <SortItems Source="@(_BuildJavaAssemblyInputs)">
            <Output TaskParameter="Output" ItemName="_BuildJavaAssemblyInputsSorted" />
        </SortItems>
        <GetFileHash Files="@(_BuildJavaAssemblyInputsSorted)">
            <Output TaskParameter="Items" ItemName="_BuildJavaAssemblyInputsWithHash" />
        </GetFileHash>
        <ItemGroup>
            <_BuildJavaAssemblyInputsStateLine Include="@(OpenJdkExcludeRegex)" />
            <_BuildJavaAssemblyInputsStateLine Include="$(DebugSymbols)" />
            <_BuildJavaAssemblyInputsStateLine Include="$(DebugType)" />
            <_BuildJavaAssemblyInputsStateLine Include="$(AssemblyName)" />
            <_BuildJavaAssemblyInputsStateLine Include="@(_BuildJavaAssemblyInputsWithHash->'%(FileHash) %(Identity)')" />
        </ItemGroup>
        <WriteLinesToFile File="$(_BuildJavaAssemblyStateFile)" Lines="@(_BuildJavaAssemblyInputsStateLine)" Overwrite="true" WriteOnlyWhenDifferent="true" />

        <Touch Files="$(_BuildJavaAssemblyStateStampFile)" AlwaysCreate="true" ForceTouch="true" />
        <ItemGroup>
            <FileWrites Include="$(_BuildJavaAssemblyStateStampFile)" />
            <FileWrites Include="$(_BuildJavaAssemblyStateFile)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <_BuildJavaAssemblyCoreStampFile>$(IntermediateOutputPath)$(MSBuildThisFile).BuildJavaAssemblyCore.stamp</_BuildJavaAssemblyCoreStampFile>
        <_BuildJavaAssemblyCoreTempPath>$(IntermediateOutputPath)java\</_BuildJavaAssemblyCoreTempPath>
        <_BuildJavaAssemblyCoreExcludeFilePath>$(IntermediateOutputPath)$(MSBuildThisFile).BuildJavaAssembly.exclude.txt</_BuildJavaAssemblyCoreExcludeFilePath>
        <_BuildJavaAssemblyCoreIkvmcArgsFilePath>$(IntermediateOutputPath)$(MSBuildThisFile).BuildJavaAssembly.ikvmc.args.txt</_BuildJavaAssemblyCoreIkvmcArgsFilePath>
    </PropertyGroup>

    <Target Name="BuildJavaAssemblyCore" DependsOnTargets="BuildJavaAssemblyState;GetIkvmcExe;GetIkvmRuntimeDll;GenerateJavaAssemblyInfo;ResolveJavaClassItems;ResolveJavaResourceItems;BuildRmiStubs" Inputs="$(_BuildJavaAssemblyStateFile)" Outputs="$(JavaAssemblyPath);$(JavaDebugSymbolsPath);$(_BuildJavaAssemblyCoreStampFile)">
        <WriteLinesToFile File="$(_BuildJavaAssemblyCoreExcludeFilePath)" Lines="@(OpenJdkExcludeRegex)" Overwrite="true" />

        <ItemGroup>
        </ItemGroup>
        
        <ItemGroup>
            <_IkvmcArgs Include="-debug" Condition=" '$(DebugSymbols)' == 'true' Or '$(DebugType)' != 'none' " />
            <_IkvmcArgs Include="-assembly:$(AssemblyName)" />
            <_IkvmcArgs Include="-version:$(AssemblyVersion)" />
            <_IkvmcArgs Include="-runtime:$(IkvmRuntimeDll)" />
            <_IkvmcArgs Include="-keyfile:$(AssemblyOriginatorKeyFile)" Condition=" '$(SignAssembly)' == 'true' " />
            <_IkvmcArgs Include="@(IkvmMapFile->'-remap:%(FullPath)')" />
            <_IkvmcArgs Include="-compressresources" />
            <_IkvmcArgs Include="-opt:fields" />
            <_IkvmcArgs Include="-strictfinalfieldsemantics" />
            <_IkvmcArgs Include="-removeassertions" />
            <_IkvmcArgs Include="-target:library" />
            <_IkvmcArgs Include="-sharedclassloader" />
            <_IkvmcArgs Include="-nowarn:110" />
            <_IkvmcArgs Include="-w4" />
            <_IkvmcArgs Include="-noparameterreflection" />
            <_IkvmcArgs Include="-exclude:$([System.IO.Path]::GetFullPath('$(_BuildJavaAssemblyCoreExcludeFilePath)'))" />
            <_IkvmcAssemblyAttributeItem Include="@(JavaSourceItems)" ClassPath="$([System.String]::new('%(JavaSourceItems.PackagePath)').Replace('/', '\'))" Condition=" '%(JavaSourceItems.PackagePath)' != '' And '%(JavaSourceItems.AssemblyAttributes)' == 'true' " />
            <_IkvmcAssemblyAttributePath Include="@(_IkvmcAssemblyAttributeItem->'$(JavaClassOutputPath)%(ClassPath).class')" />
            <_IkvmcArgs Include="@(_IkvmcAssemblyAttributePath->'-assemblyattributes:%(FullPath)')" />
            <_IkvmcArgs Include="@(ReferencePathWithRefAssemblies->Distinct()->'-reference:%(FullPath)')" />
            <_IkvmcResourceItem Include="@(JavaResourceItems)" ResourcePath="$([System.String]::new('%(JavaResourceItems.ResourcePath)').Replace('\', '/'))" Condition=" '%(Identity)' != '' " />
            <_IkvmcResourcePath Include="@(_IkvmcResourceItem)" />
            <_IkvmcArgs Include="@(_IkvmcResourcePath->'-resource:%(ResourcePath)=%(FullPath)')" />
            <_IkvmcArgs Include="@(JavaClassItems->Distinct()->'%(FullPath)')" />
        </ItemGroup>
        <WriteLinesToFile File="$(_BuildJavaAssemblyCoreIkvmcArgsFilePath)" Lines="@(_IkvmcArgs)" Overwrite="true" />

        <!-- Build Java assembly into temporary directory. -->
        <MakeDir Directories="$(_BuildJavaAssemblyCoreTempPath)" />
        <Delete Files="$(_BuildJavaAssemblyCoreTempPath)$(JavaAssemblyName);$(_BuildJavaAssemblyCoreTempPath)$(JavaDebugSymbolsName)" />
        <Message Text="$(_IkvmToolExecPrefix)$(Ikvmc) -out:$(_BuildJavaAssemblyCoreTempPath)$(JavaAssemblyName) @(_IkvmcArgs, ' ')" />
        <Exec Command="$(_IkvmToolExecPrefix)$(Ikvmc) -out:$(_BuildJavaAssemblyCoreTempPath)$(JavaAssemblyName) @$(_BuildJavaAssemblyCoreIkvmcArgsFilePath)" />

        <!-- Move temporary files in place of permanent files. -->
        <Delete Files="$(JavaAssemblyPath);$(JavaDebugSymbolsPath)" />
        <Move SourceFiles="$(_BuildJavaAssemblyCoreTempPath)$(JavaAssemblyName)" DestinationFiles="$(JavaAssemblyPath)" OverwriteReadOnlyFiles="true" />
        <Move SourceFiles="$(_BuildJavaAssemblyCoreTempPath)$(JavaDebugSymbolsName)" DestinationFiles="$(JavaDebugSymbolsPath)" OverwriteReadOnlyFiles="true" Condition="Exists('$(_BuildJavaAssemblyCoreTempPath)$(JavaDebugSymbolsName)')" />
        <RemoveDir Directories="$(_BuildJavaAssemblyCoreTempPath)" />

        <Touch Files="$(_BuildJavaAssemblyCoreStampFile)" AlwaysCreate="true" ForceTouch="true" />
        <ItemGroup>
            <FileWrites Include="$(_BuildJavaAssemblyCoreStampFile)" />
            <FileWrites Include="$(_BuildJavaAssemblyCoreExcludeFilePath)" />
            <FileWrites Include="$(_BuildJavaAssemblyCoreIkvmcArgsFilePath)" />
            <FileWrites Include="$(_BuildJavaAssemblyCoreTempPath)$(JavaAssemblyName);$(_BuildJavaAssemblyCoreTempPath)$(JavaDebugSymbolsName)" />
            <FileWrites Include="$(JavaAssemblyPath);$(JavaDebugSymbolsPath)" />
        </ItemGroup>

        <!-- Forces the merge to run again. This is sort of a hack. -->
        <Touch Files="$(_MergeJavaAssemblyCoreForceBuildFile)" AlwaysCreate="true" ContinueOnError="true" />
    </Target>

    <PropertyGroup>
        <BuildJavaAssemblyDependsOn>
            $(BuildJavaAssemblyDependsOn);
            GetIkvmcExe;
            GetIkvmRuntimeDll;
            ResolveJavaClassItems;
            ResolveJavaResourceItems;
            BuildRmiStubs;
            BuildJavaAssemblyState;
            BuildJavaAssemblyCore;
        </BuildJavaAssemblyDependsOn>
    </PropertyGroup>

    <Target Name="BuildJavaAssembly" DependsOnTargets="$(BuildJavaAssemblyDependsOn)">

    </Target>

    <Target Name="CleanJavaAssembly">
        <Delete Files="$(_BuildJavaAssemblyStateStampFile)" />
        <Delete Files="$(_BuildJavaAssemblyStateFile)" />
        <Delete Files="$(_BuildJavaAssemblyCoreStampFile)" />
        <Delete Files="$(_BuildJavaAssemblyCoreExcludeFilePath)" />
        <Delete Files="$(_BuildJavaAssemblyCoreIkvmcArgsFilePath)" />
        <RemoveDir Directories="$(_BuildJavaAssemblyCoreTempPath)" />
        <Delete Files="$(JavaAssemblyPath);$(JavaDebugSymbolsPath)" />
    </Target>

    <PropertyGroup>
        <CleanDependsOn>
            $(CleanDependsOn);
            CleanJavaAssembly;
        </CleanDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <BuildDependsOn>
            BuildJavaAssembly;
            $(BuildDependsOn);
        </BuildDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <_MergeJavaAssemblyCoreForceBuildFile>$(IntermediateOutputPath)$(MSBuildThisFile).MergeJavaAssemblyCore.force</_MergeJavaAssemblyCoreForceBuildFile>
    </PropertyGroup>
    
    <Target Name="MergeJavaAssemblyCore" DependsOnTargets="BuildJavaAssembly" Condition="'$(_MergeJavaAssemblyTimestampBeforeCompile)' != '$(_MergeJavaAssemblyTimestampAfterCompile)' Or Exists('$(_MergeJavaAssemblyCoreForceBuildFile)')">
        <!-- Create a file which will force the next build to run this target if the previous build failed.
             Failure between this point and the point where intermediate outputs are moved will make CoreCompile not run again (up-to-date outputs).
             That in turn results in timestamps being equal, this target not running and untransformed assemblies being copied to the output. -->
        <Touch Files="$(_MergeJavaAssemblyCoreForceBuildFile)" AlwaysCreate="true" ContinueOnError="true" />

        <!-- remove the intermediate assembly, it's absense will cause CoreCompile to run again if we fail -->
        <Delete Files="$(IntermediateOutputPath)$(TargetName)$(TargetExt)" />
        <Delete Files="$(IntermediateOutputPath)$(TargetName).pdb" Condition="Exists('$(IntermediateOutputPath)$(TargetName).pdb')" />

        <!-- At this point original intermediate outputs are moved, so CoreCompile will always run if build fails after this point. -->
        <Delete Files="$(_MergeJavaAssemblyCoreForceBuildFile)" ContinueOnError="True" />

        <!-- replace original assemblies -->
        <Copy SourceFiles="$(JavaAssemblyPath)" DestinationFiles="$(IntermediateOutputPath)$(TargetName)$(TargetExt)" OverwriteReadOnlyFiles="true" />
        <Copy SourceFiles="$(JavaDebugSymbolsPath)" DestinationFiles="$(IntermediateOutputPath)$(TargetName).pdb" OverwriteReadOnlyFiles="true" Condition="Exists('$(JavaDebugSymbolsPath)')" />
    </Target>

    <PropertyGroup>
        <MergeJavaAssemblyDependsOn>
            $(MergeJavaAssemblyDependsOn);
            BuildJavaAssembly;
            MergeJavaAssemblyCore;
        </MergeJavaAssemblyDependsOn>
    </PropertyGroup>

    <Target Name="MergeJavaAssembly" DependsOnTargets="$(MergeJavaAssemblyDependsOn)">

    </Target>

    <Target Name="MergeJavaAssemblyTimestampBeforeCompile">
        <PropertyGroup>
            <_MergeJavaAssemblyTimestampBeforeCompile>%(IntermediateAssembly.ModifiedTime)</_MergeJavaAssemblyTimestampBeforeCompile>
        </PropertyGroup>
    </Target>

    <Target Name="MergeJavaAssemblyTimestampAfterCompile">
        <PropertyGroup>
            <_MergeJavaAssemblyTimestampAfterCompile>%(IntermediateAssembly.ModifiedTime)</_MergeJavaAssemblyTimestampAfterCompile>
        </PropertyGroup>
    </Target>

    <PropertyGroup>
        <CompileDependsOn>
            MergeJavaAssemblyTimestampBeforeCompile;
            $(CompileDependsOn);
            MergeJavaAssemblyTimestampAfterCompile;
            MergeJavaAssembly;
        </CompileDependsOn>
    </PropertyGroup>

    <Target Name="ResolveJavaAssemblyReferencesDesignTime" BeforeTargets="ResolveAssemblyReferencesDesignTime" DependsOnTargets="BuildJavaAssembly">
        <ItemGroup>
            <Reference Include="@(JavaAssemblyPath)" />
        </ItemGroup>
    </Target>

</Project>