<Project>
    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    </PropertyGroup>

    <!-- 
    
        ClangProjectReference
        
        These references point to Clang projects and have their produced libraries added to the project output.
        
    -->

    <Target Name="AssignClangProjectConfiguration" Condition=" '$(DesignTimeBuild)' != 'true' And '@(ClangProjectReference)' != '' ">
        <ItemGroup>
            <_ClangProjectReference Include="@(ClangProjectReference)" />
        </ItemGroup>
        <PropertyGroup>
            <OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration Condition="'$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)' == ''">true</OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration>
            <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildingSolutionFile)' == 'true')">true</ShouldUnsetParentConfigurationAndPlatform>
            <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == ''">false</ShouldUnsetParentConfigurationAndPlatform>
        </PropertyGroup>
        <AssignProjectConfiguration ProjectReferences="@(_ClangProjectReference)" CurrentProject="$(MSBuildProjectFullPath)" CurrentProjectConfiguration="$(Configuration)" CurrentProjectPlatform="$(Platform)" DefaultToVcxPlatformMapping="$(DefaultToVcxPlatformMapping)" VcxToDefaultPlatformMapping="$(VcxToDefaultPlatformMapping)" OutputType="$(OutputType)" ResolveConfigurationPlatformUsingMappings="true" SolutionConfigurationContents="$(CurrentSolutionConfigurationContents)" AddSyntheticProjectReferencesForSolutionDependencies="false" OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration="$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)" ShouldUnsetParentConfigurationAndPlatform="$(ShouldUnsetParentConfigurationAndPlatform)">
            <Output TaskParameter="AssignedProjects" ItemName="__ClangProjectReferenceWithConfiguration"/>
            <Output TaskParameter="UnassignedProjects" ItemName="__ClangProjectReferenceWithConfiguration"/>
        </AssignProjectConfiguration>
        <ItemGroup>
            <_ClangProjectReferenceWithConfiguration Remove="@(_ClangProjectReferenceWithConfiguration)" />
            <_ClangProjectReferenceWithConfiguration Include="@(__ClangProjectReferenceWithConfiguration)" />
        </ItemGroup>
    </Target>

    <Target Name="_GetClangProjectReferences" DependsOnTargets="AssignClangProjectConfiguration" Condition=" '@(_ClangProjectReferenceWithConfiguration)' != '' ">
        <ItemGroup>
            <__ClangProjectReference Remove="@(__ClangProjectReference)" />
            <__ClangProjectReference Include="@(_ClangProjectReferenceWithConfiguration)">
                <ProjectName>$([System.IO.Path]::GetFileNameWithoutExtension('%(Identity)'))</ProjectName>
                <OutputItemGroup Condition=" '%(_ClangProjectReferenceWithConfiguration.OutputItemGroup)' == '' ">None</OutputItemGroup>
            </__ClangProjectReference>
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GetClangProjectReferencesDependsOn>
            $(GetClangProjectReferencesDependsOn);
            AssignClangProjectConfiguration;
            _GetClangProjectReferences;
        </GetClangProjectReferencesDependsOn>
    </PropertyGroup>

    <Target Name="GetClangProjectReferences" DependsOnTargets="$(GetClangProjectReferencesDependsOn)">

    </Target>

    <Target Name="GetClangProjectReferenceItems" DependsOnTargets="GetClangProjectReferences" Condition=" '$(DesignTimeBuild)' != 'true' And '@(_ClangProjectReference)' != '' ">
        <ItemGroup>
            <_ClangProjectReferencesToTarget Remove="@(_ClangProjectReferencesToTarget)" />
            <_ClangProjectReferencesToTarget Include="@(__ClangProjectReference)">
                <Properties>%(__ClangProjectReference.SetConfiguration);%(__ClangProjectReference.SetPlatform);TargetIdentifier=%(__ClangProjectReference.RuntimeIdentifier)</Properties>
            </_ClangProjectReferencesToTarget>
        </ItemGroup>
        <MSBuild Projects="@(_ClangProjectReferencesToTarget)" Targets="Build" BuildInParallel="$(BuildInParallel)" RemoveProperties="$(_GlobalPropertiesToRemoveFromProjectReferences);TargetFramework;RuntimeIdentifier;DesignTimeBuild" />
        <MSBuild Projects="@(_ClangProjectReferencesToTarget)" Targets="GetOutputItem" BuildInParallel="$(BuildInParallel)" RemoveProperties="$(_GlobalPropertiesToRemoveFromProjectReferences);TargetFramework;RuntimeIdentifier;DesignTimeBuild" RebaseOutputs="true">
            <Output TaskParameter="TargetOutputs" ItemName="_ResolvedClangProjectReferenceTargetOutput" />
        </MSBuild>
        <ItemGroup>
            <_ClangProjectReferenceItems Include="@(_ResolvedClangProjectReferenceTargetOutput)" />
            <_ClangProjectReferenceExecutableItems Include="@(_ClangProjectReferenceItems->'%(ExecutablePath)')" />
        </ItemGroup>
    </Target>

    <Target Name="_GetClangProjectReferenceOutputItems" DependsOnTargets="GetClangProjectReferenceItems" Condition=" '$(DesignTimeBuild)' != 'true' And '@(_ClangProjectReferenceExecutableItems)' != '' ">
        <ItemGroup>
            <_ClangProjectReferenceOutputItems Include="@(_ClangProjectReferenceExecutableItems)" Condition=" '%(_ClangProjectReferenceExecutableItems.TargetIdentifier)' != '' ">
                <TargetPath>runtimes\%(_ClangProjectReferenceExecutableItems.TargetIdentifier)\native\%(_ClangProjectReferenceExecutableItems.Filename)%(_ClangProjectReferenceExecutableItems.Extension)</TargetPath>
                <TargetPath Condition=" '$(RuntimeIdentifier)' != '' And '$(RuntimeIdentifier)' == '%(_ClangProjectReferenceExecutableItems.TargetIdentifier)' ">%(_ClangProjectReferenceExecutableItems.Filename)%(_ClangProjectReferenceExecutableItems.Extension)</TargetPath>
                <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
                <CopyToOutputDirectory Condition=" '$(RuntimeIdentifier)' != '' And '$(RuntimeIdentifier)' != '%(_ClangProjectReferenceExecutableItems.TargetIdentifier)' ">Never</CopyToOutputDirectory>
                <PackagePath>runtimes\%(_ClangProjectReferenceExecutableItems.TargetIdentifier)\native\%(_ClangProjectReferenceExecutableItems.Filename)%(_ClangProjectReferenceExecutableItems.Extension)</PackagePath>
                <Pack Condition=" '%(_ClangProjectReferenceExecutableItems.Pack)' == '' ">true</Pack>
            </_ClangProjectReferenceOutputItems>
        </ItemGroup>
        <CreateItem Include="@(_ClangProjectReferenceOutputItems)" AdditionalMetadata="%(_ClangProjectReferenceOutputItems.AdditionalItemMetadata)">
            <Output TaskParameter="Include" ItemName="%(_ClangProjectReferenceOutputItems.OutputItemGroup)" />
        </CreateItem>
    </Target>

    <PropertyGroup>
        <GetClangProjectReferenceOutputItemsDependsOn>
            $(GetClangProjectReferenceOutputItemsDependsOn);
            GetClangProjectReferences;
            GetClangProjectReferenceItems;
            _GetClangProjectReferenceOutputItems;
        </GetClangProjectReferenceOutputItemsDependsOn>
    </PropertyGroup>

    <Target Name="GetClangProjectReferenceOutputItems" DependsOnTargets="$(GetClangProjectReferenceOutputItemsDependsOn)">
        
    </Target>

    <PropertyGroup>
        <GetClangProjectReferenceItemsForPackDependsOn>
            $(GetClangProjectReferenceItemsForPackDependsOn);
            GetClangProjectReferences;
            GetClangProjectReferenceItems;
            GetClangProjectReferenceOutputItems;
        </GetClangProjectReferenceItemsForPackDependsOn>
    </PropertyGroup>

    <Target Name="GetClangProjectReferenceItemsForPack" BeforeTargets="_GetPackageFiles" DependsOnTargets="$(GetClangProjectReferenceItemsForPackDependsOn)" Condition=" '$(DesignTimeBuild)' != 'true' ">

    </Target>

    <PropertyGroup>
        <AssignTargetPathsDependsOn>
            GetClangProjectReferences;
            GetClangProjectReferenceItems;
            GetClangProjectReferenceOutputItems;
            $(AssignTargetPathsDependsOn);
        </AssignTargetPathsDependsOn>
    </PropertyGroup>

    <Target Name="ResolveClangAdditionalRuntimeNativeAssets" DependsOnTargets="GetClangProjectReferenceItems" BeforeTargets="ResolveBuildDependencyFileExtensions">
        <ItemGroup>
            <AdditionalRuntimeNativeAssets Include="@(_ClangProjectReferenceExecutableItems->'runtimes\%(TargetIdentifier)\native\%(Filename)%(Extension)')" Condition=" '%(_ClangProjectReferenceExecutableItems.TargetIdentifier)' != '' ">
                <LibraryName>%(_ClangProjectReferenceExecutableItems.TargetName)</LibraryName>
                <LibraryVersion>%(_ClangProjectReferenceExecutableItems.Version)</LibraryVersion>
                <LibraryType>project</LibraryType>
                <LibraryPath>%(_ClangProjectReferenceExecutableItems.ProjectName)/%(_ClangProjectReferenceExecutableItems.Version)</LibraryPath>
                <Runtime>%(_ClangProjectReferenceExecutableItems.TargetIdentifier)</Runtime>
            </AdditionalRuntimeNativeAssets>
        </ItemGroup>
    </Target>

</Project>
