<Project>
    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    </PropertyGroup>

    <ItemGroup>
        <IkvmImageAvailableTargetFrameworks Include="net472;net6.0;net8.0" />
        <IkvmImageAvailableRuntimeIdentifiers Include="win-x64;win-x86;win-arm64;linux-x64;linux-arm;linux-arm64;linux-musl-x64;linux-musl-arm;linux-musl-arm64;osx-x64;osx-arm64;android-x64;android-arm;android-arm64;browser-wasm" />
    </ItemGroup>

    <PropertyGroup>
        <IkvmImageTargetPath Condition=" '$(IkvmImageTargetPath)' == '' ">ikvm</IkvmImageTargetPath>
        <IkvmPropertiesFileName Condition=" '$(IkvmPropertiesFileName)' == '' ">ikvm.properties</IkvmPropertiesFileName>
        <CopyIkvmImageItemToOutputDirectory Condition=" '$(CopyIkvmImageItemToOutputDirectory)' == '' ">PreserveNewest</CopyIkvmImageItemToOutputDirectory>
        <CopyIkvmImageItemToPublishDirectory Condition=" '$(CopyIkvmImageItemToPublishDirectory)' == '' "></CopyIkvmImageItemToPublishDirectory>
        <CopyIkvmPropertiesFileToOutputDirectory Condition=" '$(CopyIkvmPropertiesFileToOutputDirectory)' == '' ">PreserveNewest</CopyIkvmPropertiesFileToOutputDirectory>
        <CopyIkvmPropertiesFileToPublishDirectory Condition=" '$(CopyIkvmPropertiesFileToPublishDirectory)' == '' "></CopyIkvmPropertiesFileToPublishDirectory>
    </PropertyGroup>

    <Choose>
        <When Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net461'))">
            <PropertyGroup>
                <_IkvmImageTargetFramework>net472</_IkvmImageTargetFramework>
            </PropertyGroup>
        </When>
        <When Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net8.0'))">
            <PropertyGroup>
                <_IkvmImageTargetFramework>net8.0</_IkvmImageTargetFramework>
            </PropertyGroup>
        </When>
        <When Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netcoreapp3.1'))">
            <PropertyGroup>
                <_IkvmImageTargetFramework>net6.0</_IkvmImageTargetFramework>
            </PropertyGroup>
        </When>
    </Choose>

    <Target Name="ResolveIkvmImageTargetFramework">
        <ItemGroup>
            <_IkvmImageTargetFrameworks Include="$(_IkvmImageTargetFramework)" />
        </ItemGroup>
    </Target>

    <Target Name="ResolveIkvmImageRuntimeIdentifier">
        <IkvmResolveNearestRuntimeIdentifier AvailableRuntimeIdentifiers="@(IkvmImageAvailableRuntimeIdentifiers, ';')" TargetRuntimeIdentifier="$(RuntimeIdentifier)">
            <Output TaskParameter="NearestRuntimeIdentifier" PropertyName="_IkvmImageRuntimeIdentifier" />
        </IkvmResolveNearestRuntimeIdentifier>
        <ItemGroup>
            <_IkvmImageRuntimeIdentifiers Include="$(_IkvmImageRuntimeIdentifier)" />
            <_IkvmImageRuntimeIdentifiers Include="win-x64" Condition=" '$(_IkvmImageRuntimeIdentifier)' == 'win-x86' And '$(Prefer32Bit)' == 'false' " />
            <_IkvmImageRuntimeIdentifiers Include="@(IkvmImageAvailableRuntimeIdentifiers)" Condition=" '@(_IkvmImageRuntimeIdentifiers)' == '' " />
        </ItemGroup>
    </Target>

    <UsingTask TaskName="_ExpandIkvmImageItems" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <TargetFrameworks ParameterType="System.String[]" Required="true" />
            <RuntimeIdentifiers ParameterType="System.String[]" Required="true" />
            <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                var l = new List<ITaskItem>();
                
                foreach (var tfm in TargetFrameworks)
                {
                    foreach (var rid in RuntimeIdentifiers)
                    {
                        foreach (var item in Items)
                        {
                            var itemTfm = item.GetMetadata("TargetFramework");
                            if (string.IsNullOrEmpty(itemTfm))
                                continue;
                            
                            var itemRid = item.GetMetadata("RuntimeIdentifier");
                            if (string.IsNullOrEmpty(itemRid))
                                continue;
                            
                            if ((itemTfm == "any" || itemTfm == tfm) && (itemRid == "any" || itemRid == rid))
                            {
                                var i = new TaskItem(item);
                                i.SetMetadata("TargetFramework", tfm);
                                i.SetMetadata("RuntimeIdentifier", rid);
                                l.Add(i);
                            }
                        }
                    }
                }
                
                Items = l.ToArray();
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <PropertyGroup>
        <ExpandIkvmImageItemsDependsOn>
            $(ExpandIkvmImageItemsDependsOn);
            ResolveIkvmImageTargetFramework;
            ResolveIkvmImageRuntimeIdentifier;
        </ExpandIkvmImageItemsDependsOn>
    </PropertyGroup>

    <Target Name="ExpandIkvmImageItems" DependsOnTargets="$(ExpandIkvmImageItemsDependsOn)">
        <_ExpandIkvmImageItems TargetFrameworks="@(_IkvmImageTargetFrameworks)" RuntimeIdentifiers="@(_IkvmImageRuntimeIdentifiers)" Items="@(IkvmImageItem)">
            <Output TaskParameter="Items" ItemName="_IkvmImageItemExpanded" />
        </_ExpandIkvmImageItems>
        <ItemGroup>
            <_IkvmImageItemExpanded Update="@(_IkvmImageItemExpanded)">
                <TargetPath>$(IkvmImageTargetPath)\%(_IkvmImageItemExpanded.RuntimeIdentifier)\%(_IkvmImageItemExpanded.ImagePath)</TargetPath>
                <CopyToOutputDirectory>$(CopyIkvmImageItemToOutputDirectory)</CopyToOutputDirectory>
                <CopyToPublishDirectory>$(CopyIkvmImageItemToPublishDirectory)</CopyToPublishDirectory>
                <Link>$(IkvmImageTargetPath)\%(_IkvmImageItemExpanded.RuntimeIdentifier)\%(_IkvmImageItemExpanded.ImagePath)</Link>
                <Pack Condition=" '%(_IkvmImageItemExpanded.Pack)' == '' ">false</Pack>
            </_IkvmImageItemExpanded>
        </ItemGroup>
    </Target>

    <UsingTask TaskName="_FilterIkvmImageItems" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                var l = new List<ITaskItem>();
                
                var targetPathHashSet = new HashSet<string>();
                foreach (var item in Items)
                {
                    var targetPath = item.GetMetadata("TargetPath");
                    if (string.IsNullOrEmpty(targetPath) == false && targetPathHashSet.Add(targetPath))
                        l.Add(item);
                }
                
                Items = l.ToArray();
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <PropertyGroup>
        <GetIkvmImageItemsOutputItemsDependsOn>
            $(GetIkvmImageItemsOutputItemsDependsOn);
            ExpandIkvmImageItems;
        </GetIkvmImageItemsOutputItemsDependsOn>
    </PropertyGroup>

    <Target Name="GetIkvmImageItemsOutputItems" BeforeTargets="_GetPackageFiles;AssignLinkMetadata;AssignTargetPaths" DependsOnTargets="$(GetIkvmImageItemsOutputItemsDependsOn)">
        <_FilterIkvmImageItems Items="@(_IkvmImageItemExpanded)">
            <Output TaskParameter="Items" ItemName="_IkvmImageItemFiltered" />
        </_FilterIkvmImageItems>
        <ItemGroup>
            <_IkvmImageItemExpanded Remove="@(_IkvmImageItemExpanded)" />
            <_SourceItemsToCopyToOutputDirectory Include="@(_IkvmImageItemFiltered)" Condition=" '$(IkvmImageItemToNone)' != 'true' " />
            <_SourceItemsToCopyToPublishDirectory Include="@(_IkvmImageItemFiltered)" Condition=" '$(IkvmImageItemToNone)' != 'true' " />
            <None Include="@(_IkvmImageItemFiltered)" ItemName="None" Condition=" '$(IkvmImageItemToNone)' == 'true' " />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <CollectIkvmImageItemsOutputItemsDependsOn>
            ExpandIkvmImageItems;
            GetIkvmImageItemsOutputItems;
            $(CollectIkvmImageItemsOutputItemsDependsOn);
        </CollectIkvmImageItemsOutputItemsDependsOn>
    </PropertyGroup>

    <Target Name="CollectIkvmImageItemsOutputItems" BeforeTargets="_GetPackageFiles;AssignLinkMetadata;AssignTargetPaths" DependsOnTargets="$(CollectIkvmImageItemsOutputItemsDependsOn)">

    </Target>

    <PropertyGroup>
        <AssignTargetPathsDependsOn>
            CollectIkvmImageItemsOutputItems;
            $(AssignTargetPathsDependsOn);
        </AssignTargetPathsDependsOn>
    </PropertyGroup>

    <Target Name="IncludeIkvmPropertiesFile" BeforeTargets="_GetPackageFiles;AssignLinkMetadata;AssignTargetPaths">
        <ItemGroup>
            <None Include="$(MSBuildThisFileDirectory)$(IkvmPropertiesFileName)">
                <CopyToOutputDirectory>$(CopyIkvmPropertiesFileToOutputDirectory)</CopyToOutputDirectory>
                <CopyToPublishDirectory>$(CopyIkvmPropertiesFileToPublishDirectory)</CopyToPublishDirectory>
                <TargetPath>$(IkvmPropertiesFileName)</TargetPath>
                <Pack>false</Pack>
            </None>
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <AssignTargetPathsDependsOn>
            IncludeIkvmPropertiesFile;
            $(AssignTargetPathsDependsOn);
        </AssignTargetPathsDependsOn>
    </PropertyGroup>

    <Import Project="IKVM.Image.WebAssembly.targets" Condition=" '$(UsingMicrosoftNETSdkBlazorWebAssembly)' == 'true' Or '$(UsingMicrosoftNETSdkWebAssembly)' == 'true' " />

</Project>
