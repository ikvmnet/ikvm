<Project>
    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    </PropertyGroup>

    <!--
    This file contains targets which invoke the jobs in 'NoTask' mode.
    -->

    <PropertyGroup>
        <___IkvmTaskUtilCs>$([System.IO.File]::ReadAllText('$([System.IO.Path]::Combine('$(MSBuildThisFileDirectory)', '..', '..', 'IKVM.MSBuild.Tasks', 'IkvmTaskUtil.cs'))'))</___IkvmTaskUtilCs>
        <___IkvmAsyncTaskCs>$([System.IO.File]::ReadAllText('$([System.IO.Path]::Combine('$(MSBuildThisFileDirectory)', '..', '..', 'IKVM.MSBuild.Tasks', 'IkvmAsyncTask.cs'))'))</___IkvmAsyncTaskCs>
        <___IkvmAssemblyInfoUtilCs>$([System.IO.File]::ReadAllText('$([System.IO.Path]::Combine('$(MSBuildThisFileDirectory)', '..', '..', 'IKVM.MSBuild.Tasks', 'IkvmAssemblyInfoUtil.cs'))'))</___IkvmAssemblyInfoUtilCs>
        <___IkvmFileIdentityUtilCs>$([System.IO.File]::ReadAllText('$([System.IO.Path]::Combine('$(MSBuildThisFileDirectory)', '..', '..', 'IKVM.MSBuild.Tasks', 'IkvmFileIdentityUtil.cs'))'))</___IkvmFileIdentityUtilCs>
        <___IkvmReferenceExportItemCs>$([System.IO.File]::ReadAllText('$([System.IO.Path]::Combine('$(MSBuildThisFileDirectory)', '..', '..', 'IKVM.MSBuild.Tasks', 'IkvmReferenceExportItem.cs'))'))</___IkvmReferenceExportItemCs>
        <___IkvmReferenceExportItemMetadataCs>$([System.IO.File]::ReadAllText('$([System.IO.Path]::Combine('$(MSBuildThisFileDirectory)', '..', '..', 'IKVM.MSBuild.Tasks', 'IkvmReferenceExportItemMetadata.cs'))'))</___IkvmReferenceExportItemMetadataCs>
        <___IkvmReferenceExportItemPrepareCs>$([System.IO.File]::ReadAllText('$([System.IO.Path]::Combine('$(MSBuildThisFileDirectory)', '..', '..', 'IKVM.MSBuild.Tasks', 'IkvmReferenceExportItemPrepare.cs'))'))</___IkvmReferenceExportItemPrepareCs>
    </PropertyGroup>

    <ItemGroup>
        <___PkgSystem_Collections_Immutable Remove="@(___PkgSystem_Collections_Immutable)" />
        <___PkgSystem_Collections_Immutable Include="$(PkgSystem_Collections_Immutable)\lib\netstandard2.0\System.Collections.Immutable.dll" />
        <___PkgSystem_Reflection_Metadata Remove="@(___PkgSystem_Reflection_Metadata)" />
        <___PkgSystem_Reflection_Metadata Include="$(PkgSystem_Reflection_Metadata)\lib\netstandard2.0\System.Reflection.Metadata.dll" />
    </ItemGroup>

    <UsingTask TaskName="IkvmReferenceExportItemPrepare" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" Condition=" '$(TargetFramework)' != '' ">
        <Task>
            <Reference Include="@(___PkgSystem_Collections_Immutable)" />
            <Reference Include="@(___PkgSystem_Reflection_Metadata)" />
            <Code Type="Class" Language="cs">
                <![CDATA[
#define NETSTANDARD2_0

$([MSBuild]::Unescape('$(___IkvmTaskUtilCs)'))
$([MSBuild]::Unescape('$(___IkvmAsyncTaskCs)'))
$([MSBuild]::Unescape('$(___IkvmAssemblyInfoUtilCs)'))
$([MSBuild]::Unescape('$(___IkvmFileIdentityUtilCs)'))
$([MSBuild]::Unescape('$(___IkvmReferenceExportItemCs)'))
$([MSBuild]::Unescape('$(___IkvmReferenceExportItemMetadataCs)'))
$([MSBuild]::Unescape('$(___IkvmReferenceExportItemPrepareCs)'))
            ]]>
            </Code>
        </Task>
    </UsingTask>

    <UsingTask TaskName="IkvmSortItemGroup" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Code Language="cs" Type="Fragment">
                <![CDATA[
Items = Items.OrderBy(i => i.ItemSpec).ToArray();
            ]]>
            </Code>
        </Task>
    </UsingTask>

    <UsingTask TaskName="IkvmCleanupJavaResourceItemGroup" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Code Language="cs" Type="Fragment">
                <![CDATA[
                
                foreach (var i in Items)
                {
                    var m = i.GetMetadata("ResourcePath");
                    m = m.Replace('\\', '/');
                    while (m.Contains("//"))
                        m = m.Replace("//", "/");
                        
                    m = m.Trim('/');
                    i.SetMetadata("ResourcePath", m);
                }
                
            ]]>
            </Code>
        </Task>
    </UsingTask>

    <UsingTask TaskName="IkvmGetBase36Hash" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Value ParameterType="System.String" Required="true" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Text" />
            <Code Language="cs" Type="Fragment">
                <![CDATA[
var l = "0123456789abcdefghijklmnopqrstuvwxyz";
var b = new StringBuilder();
var v = (long)unchecked((uint)Value.GetHashCode());

while (v > 0)
{
    b.Append(l[(int)(v % 36)]);
    v /= 36;
}

Value = b.ToString();
            ]]>
            </Code>
        </Task>
    </UsingTask>

    <Target Name="_ExportReferenceGetTempSuffix">
        <IkvmGetBase36Hash Value="$(MSBuildThisFileFullPath)">
            <Output TaskParameter="Value" PropertyName="_ExportReferenceTempSuffix" />
        </IkvmGetBase36Hash>
    </Target>

    <!-- Override IKVM.NET.Sdk: directly invoke executable  -->
    <Target Name="_ExportReference" DependsOnTargets="ResolveIkvmExporter;ResolveReferenceExports;_ExportReferenceGetTempSuffix" Inputs="$(MSBuildThisFileFullPath);@(ReferenceExport)" Outputs="%(ReferenceExport.CachePath)">
        <Error Text="Could not locate ikvmstub executable." Condition=" '$(IkvmExporterPath)' == '' " />
        <Error Text="ikvmstub executable could not be located at '$(IkvmExporterPath)'" Condition="!Exists('$(IkvmExporterPath)')" />
        <Exec Command="chmod +x $(IkvmExporterPath) >/dev/null 2>&amp;1" IgnoreExitCode="true" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <ItemGroup>
            <_ReferenceExportReference Remove="@(_ReferenceExportReference)" />
            <_ReferenceExportReference Include="%(ReferenceExport.References)" />
            <_ReferenceExportLibrary Remove="@(_ReferenceExportLibrary)" />
            <_ReferenceExportLibrary Include="%(ReferenceExport.Libraries)" />
        </ItemGroup>

        <!-- Output to stage path then copy to cache path to be atomic. -->
        <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('%(ReferenceExport.StagePath)'))" />
        <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('%(ReferenceExport.CachePath)'))" />

        <ItemGroup>
            <_IkvmExporterArgs Remove="@(_IkvmExporterArgs)" />
            <_IkvmExporterArgs Include="--bootstrap" Condition=" '%(ReferenceExport.Bootstrap)' == 'true' " />
            <_IkvmExporterArgs Include="--nostdlib" Condition=" '%(ReferenceExport.NoStdLib)' == 'true' " />
            <_IkvmExporterArgs Include="--non-public-types" Condition=" '%(ReferenceExport.IncludeNonPublicTypes)' == 'true' " />
            <_IkvmExporterArgs Include="--non-public-interfaces" Condition=" '%(ReferenceExport.IncludeNonPublicInterfaces)' == 'true' " />
            <_IkvmExporterArgs Include="--non-public-members" Condition=" '%(ReferenceExport.IncludeNonPublicMembers)' == 'true' " />
            <_IkvmExporterArgs Include="--parameters" Condition=" '%(ReferenceExport.IncludeParameterNames)' == 'true' " />
            <_IkvmExporterArgs Include="@(_ReferenceExportReference->'--reference:&quot;%(FullPath)&quot;')" Condition=" '@(_ReferenceExportReference)' != '' " />
            <_IkvmExporterArgs Include="@(_ReferenceExportLibrary->'--library:&quot;%(FullPath)&quot;')" Condition=" '@(_ReferenceExportLibrary)' != '' " />
            <_IkvmExporterArgs Include="--out:&quot;%(ReferenceExport.StagePath)&quot;" />
            <_IkvmExporterArgs Include="&quot;%(ReferenceExport.Identity)&quot;" />
        </ItemGroup>

        <Delete Files="%(ReferenceExport.StagePath)" Condition="Exists('%(ReferenceExport.StagePath)')" />
        <Message Text="$(IkvmExporterExec) @(_IkvmExporterArgs, ' ')" Condition="!Exists('%(ReferenceExport.CachePath)')" />
        <Exec Command="$(IkvmExporterExec) @(_IkvmExporterArgs, ' ')" Condition="!Exists('%(ReferenceExport.CachePath)')" IgnoreStandardErrorWarningFormat="true" />
        <Copy SourceFiles="%(ReferenceExport.StagePath)" DestinationFiles="%(ReferenceExport.CachePath).$(_ExportReferenceTempSuffix)" OverwriteReadOnlyFiles="true" UseHardlinksIfPossible="true" Retries="$(CopyRetryCount)" RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)" Condition="!Exists('%(ReferenceExport.CachePath)')" />
        <Move SourceFiles="%(ReferenceExport.CachePath).$(_ExportReferenceTempSuffix)" DestinationFiles="%(ReferenceExport.CachePath)" OverwriteReadOnlyFiles="true" Condition="!Exists('%(ReferenceExport.CachePath)')" />
        <Touch Files="%(ReferenceExport.CachePath)" ForceTouch="true" />

        <ItemGroup>
            <FileWrites Include="%(ReferenceExport.StagePath)" />
        </ItemGroup>
    </Target>

    <!-- Override IKVM.NET.Sdk: directly invoke javac executable  -->
    <Target Name="_CompileJavaResponseFile" DependsOnTargets="ResolveJavaCompiler;ExportReferences;GetReferenceClasspath;BeforeCompile">
        <Error Text="Could not locate javac executable." Condition=" '$(JavaCompilerPath)' == '' " />
        <Error Text="javac could not be located at '$(JavaCompilerPath)'." Condition="!Exists('$(JavaCompilerPath)')" />
        <Exec Command="chmod +x $(JavaCompilerPath) >/dev/null 2>&amp;1" IgnoreExitCode="true" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <IkvmSortItemGroup Items="@(Classpath)">
            <Output TaskParameter="Items" ItemName="_JavaCompilerArgsClasspath" />
        </IkvmSortItemGroup>

        <IkvmSortItemGroup Items="@(Compile)">
            <Output TaskParameter="Items" ItemName="_JavaCompilerArgsCompile" />
        </IkvmSortItemGroup>

        <ItemGroup>
            <_JavaCompilerArgs Remove="@(_JavaCompilerArgs)" />
            <_JavaCompilerArgs Include="-g" Condition=" '$(DebugSymbols)' == 'true' Or '$(DebugType)' != 'none' " />
            <_JavaCompilerArgs Include="-nowarn" />
            <_JavaCompilerArgs Include="-encoding $(Encoding)" Condition=" '$(Encoding)' != '' " />
            <_JavaCompilerArgs Include="-parameters" />
            <_JavaCompilerArgs Include="-cp" />
            <_JavaCompilerArgs Include="null" Condition=" '$(Bootstrap)' == 'true' " />
            <_JavaCompilerArgs Include="@(_JavaCompilerArgsClasspath, '$([System.IO.Path]::PathSeparator)')" Condition=" '$(Bootstrap)' != 'true' And '@(_JavaCompilerArgsClasspath)' != '' " />
            <_JavaCompilerArgs Include="-bootclasspath" Condition=" '$(Bootstrap)' == 'true' And '@(_JavaCompilerArgsClasspath)' != '' " />
            <_JavaCompilerArgs Include="@(_JavaCompilerArgsClasspath, '$([System.IO.Path]::PathSeparator)')" Condition=" '$(Bootstrap)' == 'true' And '@(_JavaCompilerArgsClasspath)' != '' " />
            <_JavaCompilerArgs Include="-source" />
            <_JavaCompilerArgs Include="$(LangVersion)" />
            <_JavaCompilerArgs Include="-target" />
            <_JavaCompilerArgs Include="$(JavaVersion)" />
            <_JavaCompilerArgs Include="-d" />
            <_JavaCompilerArgs Include="$([System.IO.Path]::GetFullPath('$(ClassOutputPath)'))" />
            <_JavaCompilerArgs Include="-h" />
            <_JavaCompilerArgs Include="$([System.IO.Path]::GetFullPath('$(HeaderOutputPath)'))" />
            <_JavaCompilerArgs Include="@(_JavaCompilerArgsCompile->'%(FullPath)')" />
        </ItemGroup>
        <WriteLinesToFile File="$(_CompileJavaResponseFile)" Lines="@(_JavaCompilerArgs)" Overwrite="true" WriteOnlyWhenDifferent="true" />
    </Target>

    <PropertyGroup>
        <CompileJavaDependsOn>
            _CompileJavaResponseFile;
            $(CompileJavaDependsOn)
        </CompileJavaDependsOn>
    </PropertyGroup>

    <!-- Override IKVM.NET.Sdk: directly invoke javac executable  -->
    <Target Name="_CompileJava" DependsOnTargets="_CompileJavaResponseFile;_ResolveClasspathFiles" Inputs="$(MSBuildThisFileFullPath);$(_CompileJavaResponseFile);@(Compile);@(ClasspathFiles)" Outputs="$(_CompileJavaStampFile)">
        <Delete Files="$(_CompileJavaStampFile)" />

        <!-- Store initial time. Files that remain older than this will be removed. -->
        <PropertyGroup>
            <_CompileJavaStartTime>$([System.DateTime]::Now.Ticks)</_CompileJavaStartTime>
        </PropertyGroup>

        <RemoveDir Directories="$(ClassOutputPath)" />
        <MakeDir Directories="$(ClassOutputPath)" />
        <RemoveDir Directories="$(HeaderOutputPath)" />
        <MakeDir Directories="$(HeaderOutputPath)" />

        <Message Text="$(JavaCompilerExec) @$(_CompileJavaResponseFile)" />
        <Exec Command="$(JavaCompilerExec) @$(_CompileJavaResponseFile)" IgnoreStandardErrorWarningFormat="true" />

        <!-- Remove files that were not modified by this compilation. -->
        <ItemGroup>
            <_CompileJavaClassFiles Include="$(ClassOutputPath)**\*.class" />
            <_CompileJavaHeaderFiles Include="$(ClassOutputPath)**\*.h" />
            <_CompileJavaStaleFiles Include="@(_CompileJavaClassFiles);@(_CompileJavaHeaderFiles)" Condition=" '%(ModifiedTime)' == '' Or $([System.DateTime]::Parse('%(ModifiedTime)').Ticks) &lt; $(_CompileJavaStartTime) " />
            <_CompileJavaClassFiles Remove="@(_CompileJavaClassFiles)" />
            <_CompileJavaHeaderFiles Remove="@(_CompileJavaHeaderFiles)" />
        </ItemGroup>

        <Delete Files="@(_CompileJavaStaleFiles)" />
        <Touch Files="$(_CompileJavaStampFile)" AlwaysCreate="true" ForceTouch="true" />

        <ItemGroup>
            <_CompileJavaStaleFiles Remove="@(_CompileJavaStaleFiles)" />
        </ItemGroup>
    </Target>

    <Target Name="_CoreCompileResponseFile" DependsOnTargets="ResolveIkvmCompiler;ResolveIkvmRuntimeAssembly;CompileJava;_WriteExcludeFile">
        <Error Text="Could not locate IKVM.Runtime assembly." Condition=" '$(IkvmRuntimeAssembly)' == '' " />
        <Error Text="IKVM.Runtime.dll could not be located at '$(IkvmRuntimeAssembly)'." Condition="!Exists('$(IkvmRuntimeAssembly)')" />

        <ItemGroup>
            <_Convert Include="@(Convert)" />
            <_AssemblyAttributesClass Include="@(_Convert)" Condition=" '%(Filename)%(Extension)' == '__AssemblyAttributes.class' " />
            <_AssemblyAttributesClass Include="@(_Convert)" Condition=" '%(Filename)%(Extension)' == '__AssemblyInfo.class' " />
            <_Convert Remove="@(_AssemblyAttributesClass)" />
        </ItemGroup>

        <PropertyGroup>
            <_Target>$(OutputType.ToLowerInvariant())</_Target>
            <_Target Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netcoreapp3.1'))">library</_Target>
        </PropertyGroup>

        <IkvmCleanupJavaResourceItemGroup Items="@(JavaResource)">
            <Output TaskParameter="Items" ItemName="_IkvmCompilerJavaResourceClean" />
        </IkvmCleanupJavaResourceItemGroup>

        <IkvmSortItemGroup Items="@(_IkvmCompilerJavaResourceClean)">
            <Output TaskParameter="Items" ItemName="_IkvmCompilerJavaResource" />
        </IkvmSortItemGroup>

        <IkvmSortItemGroup Items="@(_Convert)">
            <Output TaskParameter="Items" ItemName="_IkvmCompilerConvert" />
        </IkvmSortItemGroup>

        <IkvmSortItemGroup Items="@(ReferencePathWithRefAssemblies)">
            <Output TaskParameter="Items" ItemName="_IkvmCompilerReferencePathWithRefAssemblies" />
        </IkvmSortItemGroup>

        <ItemGroup>
            <_IkvmCompilerArgs Remove="@(_IkvmCompilerArgs)" />
            <_IkvmCompilerArgs Include="-bootstrap" Condition=" '$(Bootstrap)' == 'true' " />
            <_IkvmCompilerArgs Include="-debug $(DebugType)" Condition=" '$(DebugType)' != 'none' " />
            <_IkvmCompilerArgs Include="-nowarn $(NoWarn.Replace(';', ','))" Condition=" '$(NoWarn)' != '' " />
            <_IkvmCompilerArgs Include="-warnaserror" Condition=" '$(TreatWarningsAsErrors)' == 'true' " />
            <_IkvmCompilerArgs Include="-warnaserror $(WarningsAsErrors.Replace(';', ','))" Condition=" '$(TreatWarningsAsErrors)' != 'true' And '$(WarningsAsErrors)' != '' " />
            <_IkvmCompilerArgs Include="-assembly $(AssemblyName)" />
            <_IkvmCompilerArgs Include="-version $(AssemblyVersion)" />
            <_IkvmCompilerArgs Include="-runtime &quot;$(IkvmRuntimeAssembly)&quot;" />
            <_IkvmCompilerArgs Include="-keyfile &quot;$(KeyOriginatorFile)&quot;" Condition=" '$(KeyOriginatorFile)' != '' " />
            <_IkvmCompilerArgs Include="@(MapFile->'-remap &quot;%(FullPath)&quot;')" Condition=" '@(MapFile)' != '' " />
            <_IkvmCompilerArgs Include="-compressresources" Condition=" '$(CompressResources)' == 'true' " />
            <_IkvmCompilerArgs Include="-opt:fields" />
            <_IkvmCompilerArgs Include="-strictfinalfieldsemantics" Condition=" '$(StrictFinalFieldSemantics)' == 'true' " />
            <_IkvmCompilerArgs Include="-removeassertions" Condition=" '$(RemoveAssertions)' == 'true' " />
            <_IkvmCompilerArgs Include="-target $(_Target)" Condition=" '$(_Target)' != '' " />
            <_IkvmCompilerArgs Include="-platform $(PlatformTarget.ToLowerInvariant())" Condition=" '$(PlatformTarget)' != '' " />
            <_IkvmCompilerArgs Include="-main $(StartupObject)" Condition=" '$(StartupObject)' != '' " />
            <_IkvmCompilerArgs Include="-nostdlib" Condition=" '$(NoCompilerStandardLib)' == 'true' " />
            <_IkvmCompilerArgs Include="-sharedclassloader" Condition=" '$(SharedClassLoader)' == 'true' " />
            <_IkvmCompilerArgs Include="-w$(WarningLevel)" />
            <_IkvmCompilerArgs Include="-noparameterreflection" Condition=" '$(NoParameterReflection)' == 'true' " />
            <_IkvmCompilerArgs Include="-static" Condition=" '$(Static)' == 'true' " />
            <_IkvmCompilerArgs Include="-exclude &quot;$([System.IO.Path]::GetFullPath('$(_ExcludeFilePath)'))&quot;" Condition="Exists('$(_ExcludeFilePath)') And '@(ExcludeRegex)' != '' " />
            <_IkvmCompilerArgs Include="@(_AssemblyAttributesClass->'-assemblyattributes &quot;%(FullPath)&quot;')" />
            <_IkvmCompilerReferencePath Remove="@(_IkvmCompilerReferencePath)" />
            <_IkvmCompilerReferencePath Include="@(_IkvmCompilerReferencePathWithRefAssemblies)" Condition=" '%(_IkvmCompilerReferencePathWithRefAssemblies.HideFromJava)' != 'true' " />
            <_IkvmCompilerArgs Include="@(_IkvmCompilerReferencePath->'-reference &quot;%(FullPath)&quot;')" />
            <_IkvmCompilerResourceItem Remove="@(_IkvmCompilerResourceItem)" />
            <_IkvmCompilerResourceItem Include="@(_IkvmCompilerJavaResource)" ResourcePath="%(_IkvmCompilerJavaResource.ResourcePath)" Condition=" '%(Identity)' != '' And '%(_IkvmCompilerJavaResource.ResourcePath)' != '' " />
            <_IkvmCompilerArgs Include="@(_IkvmCompilerResourceItem->'-resource &quot;%(ResourcePath)=%(FullPath)&quot;')" />
            <_IkvmCompilerArgs Include="-out:&quot;$(_AssemblyTempPath)$(TargetName)$(TargetExt)&quot;" />
            <_IkvmCompilerArgs Include="@(_IkvmCompilerConvert->'&quot;%(FullPath)&quot;')" />
        </ItemGroup>
        <WriteLinesToFile File="$(_IkvmCompilerResponseFile)" Lines="@(_IkvmCompilerArgs)" Overwrite="true" WriteOnlyWhenDifferent="true" />

        <ItemGroup>
            <FileWrites Include="$(_IkvmCompilerResponseFile)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <CoreCompileDependsOn>
            _CoreCompileResponseFile;
            $(CoreCompileDependsOn);
        </CoreCompileDependsOn>
    </PropertyGroup>

    <Target Name="_CoreCompile" DependsOnTargets="_CoreCompileResponseFile" Inputs="$(MSBuildThisFileFullPath);$(_IkvmCompilerResponseFile);$(_ExcludeFilePath);$(IkvmRuntimeAssembly);$(KeyOriginatorFile);@(MapFile);@(ReferencePathWithRefAssemblies);@(Convert);@(JavaResource);$(_CompileJavaStampFile);$(_ExcludeFilePath)" Outputs="@(IntermediateAssembly)">
        <Error Text="Could not locate ikvmc executable." Condition=" '$(IkvmCompilerPath)' == '' " />
        <Error Text="ikvmc could not be located at '$(IkvmCompilerPath)'." Condition="!Exists('$(IkvmCompilerPath)')" />
        <Exec Command="chmod +x $(IkvmCompilerPath) >/dev/null 2>&amp;1" IgnoreExitCode="true" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <!-- Build Java assembly into temporary directory. -->
        <RemoveDir Directories="$(_AssemblyTempPath)" Condition="Exists('$(_AssemblyTempPath)')" />
        <MakeDir Directories="$(_AssemblyTempPath)" />
        <Message Text="$(IkvmCompilerExec) @$(_IkvmCompilerResponseFile)" />
        <Exec Command="$(IkvmCompilerExec) @$(_IkvmCompilerResponseFile)" IgnoreStandardErrorWarningFormat="true" />

        <!-- Move temporary files in place of permanent files. -->
        <Move SourceFiles="$(_AssemblyTempPath)$(TargetName)$(TargetExt)" DestinationFiles="@(IntermediateAssembly)" OverwriteReadOnlyFiles="true" />
        <Move SourceFiles="$(_AssemblyTempPath)$(TargetName).pdb" DestinationFiles="@(_DebugSymbolsIntermediatePath)" OverwriteReadOnlyFiles="true" Condition=" '@(_DebugSymbolsIntermediatePath)' != '' And Exists('$(_AssemblyTempPath)$(TargetName).pdb')" />

        <ItemGroup>
            <FileWrites Include="$(_AssemblyTempPath)$(TargetName)$(TargetExt)" />
            <FileWrites Include="$(_AssemblyTempPath)$(TargetName).pdb" />
        </ItemGroup>

        <CallTarget Targets="$(TargetsTriggeredByCompilation)" Condition=" '$(TargetsTriggeredByCompilation)' != '' " />
    </Target>

</Project>
