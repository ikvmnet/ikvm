<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(TargetFramework)' != '' ">
        <UseIkvmTasks Condition=" '$(UseIkvmTasks)' == '' ">true</UseIkvmTasks>
    </PropertyGroup>

    <PropertyGroup>
        <ClassOutputPath>$(IntermediateOutputPath)classes\</ClassOutputPath>
    </PropertyGroup>

    <!-- References may be derived from various sources: ProjectReference or IkvmReference. In each case, compilation of the Java
         code requires the original Java class or JAR files as input. These are attached as metadata to each possible reference.
    -->
    <Target Name="GetReferenceClasspath" DependsOnTargets="ResolveReferences;FindReferenceAssembliesForReferences" AfterTargets="ExportReferences">
        <ItemGroup>
            <Classpath Include="%(ReferencePath.JavaClasspath)" Condition=" '%(ReferencePath.HideFromJava)' != 'true' And '%(ReferencePath.JavaClasspath)' != '' And '%(Filename)' != 'IKVM.Java' " />
        </ItemGroup>
    </Target>

    <!-- Compiles the set of exports to be made, along with their original assembly file path. -->
    <Target Name="ResolveReferenceExports" DependsOnTargets="ResolveReferences;FindReferenceAssembliesForReferences;ResolveIkvmRuntimeAssembly">
        <ItemGroup>
            <_ReferenceExport Include="@(ReferencePath)" Condition=" '%(ReferencePath.HideFromJava)' != 'true' And '%(ReferencePath.JavaClasspath)' == '' And '%(Filename)' != 'IKVM.Java' And '%(Filename)' != 'System.Runtime.Serialization' ">
                <Bootstrap>$(Bootstrap)</Bootstrap>
                <NoStdLib>$(NoCompilerStandardLib)</NoStdLib>
            </_ReferenceExport>
        </ItemGroup>
        <IkvmReferenceExportItemPrepare Items="@(_ReferenceExport)" ToolVersion="$(IkvmVersion)" ToolFramework="$(IkvmToolFramework)" References="@(ReferencePathWithRefAssemblies)">
            <Output TaskParameter="Items" ItemName="ReferenceExport" />
        </IkvmReferenceExportItemPrepare>
        <ItemGroup>
            <ReferenceExport Update="@(ReferenceExport)">
                <StagePath>$(IkvmExportStageDir)%(IkvmIdentity)\%(Filename).jar</StagePath>
                <CachePath>$(IkvmExportCacheDir)%(IkvmIdentity)\%(Filename).jar</CachePath>
            </ReferenceExport>
        </ItemGroup>
    </Target>

    <!-- Abstract target to conduct actual assembly exports. Overridden either by Command or Task implementation. -->
    <Target Name="_ExportReference" DependsOnTargets="ResolveReferenceExports" Inputs="@(ReferenceExport)" Outputs="%(ReferenceExport.CachePath)">
        <Error Text="_ExportReference not implemented." />
    </Target>

    <Target Name="_ExportReferences" DependsOnTargets="ResolveReferenceExports" Inputs="@(ReferenceExport)" Outputs="@(ReferenceExport->'%(CachePath)')">
        <CallTarget Targets="_ExportReference" />
    </Target>

    <PropertyGroup>
        <ExportReferencesDependsOn>
            $(ExportReferencesDependsOn);
            ResolveReferences;
            FindReferenceAssembliesForReferences;
            ResolveReferenceExports;
            _ExportReferences;
        </ExportReferencesDependsOn>
    </PropertyGroup>

    <Target Name="ExportReferences" DependsOnTargets="$(ExportReferencesDependsOn)">
        <ItemGroup>
            <Classpath Include="@(ReferenceExport->'%(CachePath)')" />
        </ItemGroup>
    </Target>

    <Target Name="CleanReferenceExports">
        <Delete Files="@(ReferenceExport->'%(StagePath)')" />
    </Target>

    <PropertyGroup>
        <CoreCleanDependsOn>
            $(CoreCleanDependsOn);
            CleanReferenceExports;
        </CoreCleanDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <_CompileJavaStampFile>$(IntermediateOutputPath)$(MSBuildProjectName).javac.stamp</_CompileJavaStampFile>
        <_CompileJavaResponseFile>$(IntermediateOutputPath)$(MSBuildProjectName).javac.rsp</_CompileJavaResponseFile>
    </PropertyGroup>

    <UsingTask TaskName="ClasspathToClasspathFiles" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System"/>
            <Using Namespace="System.IO"/>
            <Code Type="Fragment" Language="cs">
                <![CDATA[
var files = new List<ITaskItem>();
foreach (var item in Items)
    if (File.Exists(item.ItemSpec))
        files.Add(item);
    else if (Directory.Exists(item.ItemSpec))
        foreach (var file in Directory.GetFiles(item.ItemSpec, "*", SearchOption.AllDirectories))
            files.Add(new TaskItem(file));

Files = files.ToArray();
]]>
            </Code>
        </Task>
    </UsingTask>

    <!-- Classpath can contain both files and directories. We transform it to files so Inputs can recognize it. -->
    <Target Name="_ResolveClasspathFiles" DependsOnTargets="GetReferenceClasspath;ExportReferences">
        <ClasspathToClasspathFiles Items="@(Classpath)">
            <Output TaskParameter="Files" ItemName="ClasspathFiles" />
        </ClasspathToClasspathFiles>
    </Target>

    <ItemGroup>
        <Compile Include="$(MSBuildThisFileDirectory)_.java" />
    </ItemGroup>

    <!-- Abstract target to conduct actual Java compilation. Overridden either by Command or Task implementation. -->
    <Target Name="_CompileJava" DependsOnTargets="ExportReferences;_ResolveClasspathFiles" Inputs="@(Compile);@(ClasspathFiles)" Outputs="$(_CompileJavaStampFile)">
        <Error Text="_CompileJava not implemented." />
    </Target>

    <PropertyGroup>
        <CompileJavaDependsOn>
            $(CompileJavaDependsOn)
            GetReferenceClasspath;
            ExportReferences;
            _ResolveClasspathFiles;
            _CompileJava;
        </CompileJavaDependsOn>
    </PropertyGroup>

    <Target Name="CompileJava" DependsOnTargets="$(CompileJavaDependsOn)">
        <ItemGroup>
            <Class Include="$(ClassOutputPath)**\*.class" />
        </ItemGroup>
    </Target>

    <Target Name="CleanCompileJava">
        <Delete Files="$(_CompileJavaCoreStampFile)" />
        <Delete Files="$(_CompileJavaCoreJavacArgFile)" />
        <RemoveDir Directories="$(ClassOutputPath)" />
    </Target>

    <PropertyGroup>
        <CoreCleanDependsOn>
            $(CoreCleanDependsOn);
            CleanCompileJava;
        </CoreCleanDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <_AssemblyTempPath>$(IntermediateOutputPath)java\</_AssemblyTempPath>
        <_ExcludeFilePath>$(IntermediateOutputPath)$(MSBuildProjectName).exclude</_ExcludeFilePath>
        <_IkvmCompilerResponseFile>$(IntermediateOutputPath)$(MSBuildProjectName).ikvmc.rsp</_IkvmCompilerResponseFile>
    </PropertyGroup>

    <!-- Abstract target to conduct compilation. Overridden either by Command or Task implementation. -->
    <Target Name="_CoreCompile" DependsOnTargets="CompileJava" Inputs="$(IkvmRuntimeAssembly);$(KeyOriginatorFile);@(MapFile);@(ReferencePathWithRefAssemblies);@(Class);@(JavaResource);$(_CompileJavaStampFile)" Outputs="@(IntermediateAssembly);@(_DebugSymbolsIntermediatePath)">
        <Error Text="_CoreCompile not implemented." />
    </Target>

    <PropertyGroup>
        <CoreCompileDependsOn>
            $(CoreCompileDependsOn);
            CompileJava;
            _CoreCompile;
        </CoreCompileDependsOn>
    </PropertyGroup>

    <Target Name="CoreCompile" DependsOnTargets="$(CoreCompileDependsOn)">
        <CallTarget Targets="$(TargetsTriggeredByCompilation)" Condition=" '$(TargetsTriggeredByCompilation)' != '' " />
    </Target>

    <Target Name="CleanCoreCompile">
        <Delete Files="$(_ExcludeFilePath)" />
        <Delete Files="$(_IkvmCompilerResponseFile)" />
        <RemoveDir Directories="$(_AssemblyTempPath)" />
    </Target>

    <PropertyGroup>
        <CoreCleanDependsOn>
            $(CoreCleanDependsOn);
            CleanCoreCompile;
        </CoreCleanDependsOn>
    </PropertyGroup>

    <!-- Include Task or Command implementation of targets. -->
    <Import Project="IKVM.Java.Core.Tasks.targets" Condition=" '$(UseIkvmTasks)' != 'false' "/>
    <Import Project="IKVM.Java.Core.NoTasks.targets" Condition=" '$(UseIkvmTasks)' == 'false' "/>

</Project>