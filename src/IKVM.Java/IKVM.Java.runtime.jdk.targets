<!--

    IKVM.Java.runtime.jdk.props
    
    Build targets for the OpenJDK jdk distribution.

-->

<Project>
    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    </PropertyGroup>

    <ItemGroup>
        <___PkgSystem_Memory Remove="@(___PkgSystem_Memory)" />
        <___PkgSystem_Memory Include="$(PkgSystem_Memory)\lib\netstandard2.0\System.Memory.dll" />
        <___PkgIKVM_ByteCode Remove="@(___PkgIKVM_ByteCode)" />
        <___PkgIKVM_ByteCode Include="$(PkgIKVM_ByteCode)\lib\netstandard2.0\IKVM.ByteCode.dll" />
    </ItemGroup>

    <UsingTask TaskName="AddNoInliningAnnotation" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" Condition=" '$(TargetFramework)' != '' ">
        <Task>
            <Reference Include="@(___PkgSystem_Memory)" />
            <Reference Include="@(___PkgIKVM_ByteCode)" />
            <Code Type="Class" Language="cs">
                <![CDATA[
using System;
using System.IO;

using IKVM.ByteCode;
using IKVM.ByteCode.Buffers;
using IKVM.ByteCode.Decoding;
using IKVM.ByteCode.Encoding;

using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
    
public class AddNoInliningAnnotation : Task
{

    public string SourceFile { get; set; }
    
    public string DestinationFile { get; set; }
    
    public override bool Execute()
    {
        var cf = ClassFile.Read(SourceFile);
        var cb = new ClassFileBuilder(cf.Version, cf.AccessFlags, cf.Constants.Get(cf.This), cf.Constants.Get(cf.Super));

        foreach (var iface in cf.Interfaces)
            cb.AddInterface(cf.Constants.Get(iface.Class).Name);

        foreach (var field in cf.Fields)
        {
            var attr = new AttributeTableBuilder(cb.Constants);
            field.Attributes.WriteTo(ref attr.Encoder);
            cb.AddField(field.AccessFlags, cf.Constants.Get(field.Name).Value, cf.Constants.Get(field.Descriptor).Value, attr);
        }

        foreach (var method in cf.Methods)
        {
            var newMethodAttributes = new AttributeTableBuilder(cb.Constants);

            var found = false;
            foreach (var methodAttribute in method.Attributes)
                if (cf.Constants.Get(methodAttribute.Name).Value == AttributeName.RuntimeVisibleAnnotations)
                {
                    newMethodAttributes.RuntimeVisibleAnnotations(e => CopyRuntimeVisibleAnnotationsAttribute(cf, cb, (RuntimeVisibleAnnotationsAttribute)methodAttribute, ref e));
                    found = true;
                }
                else
                    methodAttribute.CopyTo(cf.Constants, cb.Constants, ref newMethodAttributes.Encoder);

            if (found == false)
                newMethodAttributes.RuntimeVisibleAnnotations(e => AddMethodImplAttribute(cb, ref e));

            cb.AddMethod(method.AccessFlags, cf.Constants.Get(method.Name).Value, cf.Constants.Get(method.Descriptor).Value, newMethodAttributes);
        }
        
        cf.Attributes.CopyTo(cf.Constants, cb.Constants, cb.Attributes);

        var bb = new BlobBuilder();
        cb.Serialize(bb);

        using var of = File.OpenWrite(DestinationFile);
        bb.WriteContentTo(of);
        
        return true;
    }

    void CopyRuntimeVisibleAnnotationsAttribute(ClassFile cf, ClassFileBuilder cb, RuntimeVisibleAnnotationsAttribute annotations, ref AnnotationTableEncoder encoder)
    {
        annotations.Annotations.CopyTo(cf.Constants, cb.Constants, ref encoder);
        AddMethodImplAttribute(cb, ref encoder);
    }

    void AddMethodImplAttribute(ClassFileBuilder cb, ref AnnotationTableEncoder encoder)
    {
        encoder.Annotation(
            cb.Constants.GetOrAddUtf8("Lcli/System/Runtime/CompilerServices/MethodImplAttribute$Annotation;"), e => e
                .Array(cb.Constants.GetOrAddUtf8("value"), e2 => e2
                    .Enum(cb.Constants.GetOrAddUtf8("Lcli/System/Runtime/CompilerServices/MethodImplOptions$__Enum;"), cb.Constants.GetOrAddUtf8("NoInlining"))));
    }

}

            ]]>
            </Code>
        </Task>
    </UsingTask>

    <Target Name="AugmentMethodHandleImplBindCallerClass" DependsOnTargets="CompileJava" Inputs="$(IntermediateOutputPath)classes\java\lang\invoke\MethodHandleImpl$BindCaller$T.class" Outputs="$(IntermediateOutputPath)\MethodHandleImpl$BindCaller$T.class">
        <AddNoInliningAnnotation SourceFile="$(IntermediateOutputPath)classes\java\lang\invoke\MethodHandleImpl$BindCaller$T.class" DestinationFile="$(IntermediateOutputPath)\MethodHandleImpl$BindCaller$T.class" />
    </Target>

    <!-- a few class files should not be converted to IL, but instead included as resources -->
    <Target Name="ClassAsResource" DependsOnTargets="CompileJava;AugmentMethodHandleImplBindCallerClass">
        <ItemGroup>
            <Convert Remove="$(IntermediateOutputPath)classes\sun\reflect\misc\Trampoline.class" />
            <JavaResource Include="$(IntermediateOutputPath)classes\sun\reflect\misc\Trampoline.class" ResourcePath="sun\reflect\misc\Trampoline.class" />
            <JavaResource Include="$(IntermediateOutputPath)MethodHandleImpl$BindCaller$T.class" ResourcePath="java\lang\invoke\MethodHandleImpl$BindCaller$T.class" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <CoreCompileDependsOn>
            AugmentMethodHandleImplBindCallerClass;
            ClassAsResource;
            $(CoreCompileDependsOn);
        </CoreCompileDependsOn>
    </PropertyGroup>

    <Target Name="ResolveRmiStubInputItems" DependsOnTargets="CompileJava">
        <ItemGroup>
            <RmiStubInputItem Include="@(Classpath)" />
            <RmiStubInputItem Include="$(ClassOutputPath)**\*.class" />
        </ItemGroup>
    </Target>

    <Target Name="ResolveRmiCompiler" Condition=" '$(JAVA_HOME)' != '' And '$(RmiCompilerPath)' == '' ">
        <PropertyGroup>
            <RmiCompilerPath Condition=" '$([MSBuild]::IsOSUnixLike())' == 'true' And Exists('$(JAVA_HOME)\bin\rmic') ">$([System.IO.Path]::GetFullPath('$(JAVA_HOME)\bin\rmic'))</RmiCompilerPath>
            <RmiCompilerPath Condition=" '$([MSBuild]::IsOSUnixLike())' != 'true' And Exists('$(JAVA_HOME)\bin\rmic.exe') ">$([System.IO.Path]::GetFullPath('$(JAVA_HOME)\bin\rmic.exe'))</RmiCompilerPath>
            <RmiCompilerArgs>-J-client -J-Xms128m</RmiCompilerArgs>
            <RmiCompilerExec Condition=" '$(RmiCompilerPath)' != '' ">"$(RmiCompilerPath)" $(RmiCompilerArgs)</RmiCompilerExec>
        </PropertyGroup>
        <Message Text="Using rmic executable found in JAVA_HOME at '$(RmiCompilerPath)'." Importance="high" Condition=" '$(RmiCompilerPath)' != '' " />
        <Error Text="Could not find rmic executable." Condition=" '$(RmiCompilerPath)' == '' " />
    </Target>

    <PropertyGroup>
        <RmiStubsOutputPath>$(IntermediateOutputPath)rmistubs\</RmiStubsOutputPath>
        <RmiStubsStampFile>$(RmiStubsOutputPath)stamp</RmiStubsStampFile>
    </PropertyGroup>

    <Target Name="_BuildRmiStubs" DependsOnTargets="ResolveRmiCompiler;ResolveRmiStubInputItems" Inputs="@(RmiStubInputItem)" Outputs="$(RmiStubsStampFile)">
        <ItemGroup>
            <_RmiCompilerClasspath Include="@(Classpath);$(ClassOutputPath)" />
            <_RmiCompilerArgs Include="@(RmiCompilerArgs)" />
            <_RmiCompilerArgs Include="-nowarn" />
            <_RmiCompilerArgs Include="-bootclasspath" />
            <_RmiCompilerArgs Include="@(_RmiCompilerClasspath, '$([System.IO.Path]::PathSeparator)')" />
            <_RmiCompilerArgs Include="-d" />
            <_RmiCompilerArgs Include="$(RmiStubsOutputPath)" />
        </ItemGroup>

        <PropertyGroup>
            <_RmiCompilerArgs>@(_RmiCompilerArgs, ' ')</_RmiCompilerArgs>
        </PropertyGroup>

        <Delete Files="$(RmiStubsOutputPath)**\*" />
        <MakeDir Directories="$(RmiStubsOutputPath)" />
        <Exec Command="$(RmiCompilerExec) $(_RmiCompilerArgs) %(OpenJdkRmiStub.Flags) $([System.String]::Copy('%(OpenJdkRmiStub.Identity)').Replace('$', '\$'))" Condition=" '$([MSBuild]::IsOSUnixLike())' == 'true' " />
        <Exec Command="$(RmiCompilerExec) $(_RmiCompilerArgs) %(OpenJdkRmiStub.Flags) $([System.String]::Copy('%(OpenJdkRmiStub.Identity)'))" Condition=" '$([MSBuild]::IsOSUnixLike())' == 'false' " />
        <Touch Files="$(RmiStubsStampFile)" AlwaysCreate="true" ForceTouch="true" />

        <ItemGroup>
            <FileWrites Include="$(RmiStubsStampFile)" />
            <Convert Include="$(RmiStubsOutputPath)**\*.class" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <BuildRmiStubsDependsOn>
            $(BuildRmiStubsDependsOn)
            CompileJava;
            ResolveRmiStubInputItems;
            _BuildRmiStubs;
        </BuildRmiStubsDependsOn>
    </PropertyGroup>

    <Target Name="BuildRmiStubs" DependsOnTargets="$(BuildRmiStubsDependsOn)">

    </Target>

    <Target Name="CleanRmiStubs">
        <Delete Files="$(RmiStubsStampFile)" />
        <RemoveDir Directories="$(RmiStubsOutputPath)" />
    </Target>

    <PropertyGroup>
        <CoreCleanDependsOn>
            $(CoreCleanDependsOn);
            CleanRmiStubs;
        </CoreCleanDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <CoreCompileDependsOn>
            BuildRmiStubs;
            $(CoreCompileDependsOn);
        </CoreCompileDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <CharacterDataOutputPath>$(IntermediateOutputPath)jdk_chardat\</CharacterDataOutputPath>
        <CharacterDataDir>$(OpenJdkDir)jdk\make\data\characterdata\</CharacterDataDir>
        <UnicodeDataDir>$(OpenJdkDir)jdk\make\data\unicodedata\</UnicodeDataDir>
    </PropertyGroup>

    <ItemGroup>
        <CharacterDataItem Include="CharacterDataLatin1" Arg2="" Arg3="-latin1 8" />
        <CharacterDataItem Include="CharacterData00" Arg2="-plane 0" Arg3="11 4 1" />
        <CharacterDataItem Include="CharacterData01" Arg2="-plane 1" Arg3="11 4 1" />
        <CharacterDataItem Include="CharacterData02" Arg2="-plane 2" Arg3="11 4 1" />
        <CharacterDataItem Include="CharacterData0E" Arg2="-plane 14" Arg3="11 4 1" />
    </ItemGroup>

    <Target Name="GenerateCharacterData" DependsOnTargets="BuildJdkBuildTools;ResolveJava" Inputs="$(MSBuildThisFileFullPath);$(JdkBuildToolsStampFile);$(CharacterDataDir)%(CharacterDataItem.Identity).java.template;$(UnicodeDataDir)UnicodeData.txt;$(UnicodeDataDir)SpecialCasing.txt;$(UnicodeDataDir)PropList.txt;@(BuildJdkBuildToolsClassFiles)" Outputs="$(CharacterDataOutputPath)java\lang\%(CharacterDataItem.Identity).java">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath) >/dev/null 2>&amp;1" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" StandardErrorImportance="low" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <PropertyGroup>
            <_TemplateArg>$(CharacterDataDir)%(CharacterDataItem.Identity).java.template</_TemplateArg>
            <_TemplateArg>$(_TemplateArg.Replace('\', '\\'))</_TemplateArg>
            <_SpecArg>$(UnicodeDataDir)UnicodeData.txt</_SpecArg>
            <_SpecArg>$(_SpecArg.Replace('\', '\\'))</_SpecArg>
            <_SpecialCasingArg>$(UnicodeDataDir)SpecialCasing.txt</_SpecialCasingArg>
            <_SpecialCasingArg>$(_SpecialCasingArg.Replace('\', '\\'))</_SpecialCasingArg>
            <_PropListArg>$(UnicodeDataDir)PropList.txt</_PropListArg>
            <_PropListArg>$(_PropListArg.Replace('\', '\\'))</_PropListArg>
            <_OutputArg>$(CharacterDataOutputPath)java\lang\%(CharacterDataItem.Identity).java.tmp</_OutputArg>
            <_OutputArg>$(_OutputArg.Replace('\', '\\'))</_OutputArg>
        </PropertyGroup>

        <ItemGroup>
            <_GenerateCharacterArgs Include="%(CharacterDataItem.Arg2)" />
            <_GenerateCharacterArgs Include="-template" />
            <_GenerateCharacterArgs Include="$(_TemplateArg)" />
            <_GenerateCharacterArgs Include="-spec" />
            <_GenerateCharacterArgs Include="$(_SpecArg)" />
            <_GenerateCharacterArgs Include="-specialcasing" />
            <_GenerateCharacterArgs Include="$(_SpecialCasingArg)" />
            <_GenerateCharacterArgs Include="-proplist" />
            <_GenerateCharacterArgs Include="$(_PropListArg)" />
            <_GenerateCharacterArgs Include="-o" />
            <_GenerateCharacterArgs Include="$(_OutputArg)" />
            <_GenerateCharacterArgs Include="-string" />
            <_GenerateCharacterArgs Include="-usecharforbyte" />
            <_GenerateCharacterArgs Include="%(CharacterDataItem.Arg3)" />
        </ItemGroup>

        <MakeDir Directories="$(CharacterDataOutputPath)java\lang" />
        <Message Importance="high" Text="Generating %(CharacterDataItem.Identity).java" />
        <Exec Command="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.generatecharacter.GenerateCharacter @(_GenerateCharacterArgs, ' ')" />
        <Move SourceFiles="$(CharacterDataOutputPath)java\lang\%(CharacterDataItem.Identity).java.tmp" DestinationFiles="$(CharacterDataOutputPath)java\lang\%(CharacterDataItem.Identity).java" />

        <ItemGroup>
            <FileWrites Include="$(CharacterDataOutputPath)java\lang\%(CharacterDataItem.Identity).java" />
            <FileWrites Include="$(CharacterDataOutputPath)java\lang\%(CharacterDataItem.Identity).java.tmp" />
            <Compile Include="$(CharacterDataOutputPath)java\lang\%(CharacterDataItem.Identity).java" />
        </ItemGroup>
    </Target>

    <ItemGroup>
        <CharacterDataStaticItem Include="CharacterDataUndefined" />
        <CharacterDataStaticItem Include="CharacterDataPrivateUse" />
    </ItemGroup>

    <Target Name="GenerateCharacterDataStatic" Inputs="$(MSBuildThisFileFullPath);$(JdkBuildToolsStampFile);$(CharacterDataDir)%(CharacterDataStaticItem.Identity).java.template" Outputs="$(CharacterDataOutputPath)java\lang\%(CharacterDataStaticItem.Identity).java">
        <MakeDir Directories="$(CharacterDataOutputPath)java\lang\" />
        <Message Importance="high" Text="Generating %(CharacterDataStaticItem.Identity).java" />
        <Copy SourceFiles="$(CharacterDataDir)%(CharacterDataStaticItem.Identity).java.template" DestinationFiles="$(CharacterDataOutputPath)java\lang\%(CharacterDataStaticItem.Identity).java" />
        <Touch Files="$(CharacterDataOutputPath)java\lang\%(CharacterDataStaticItem.Identity).java" ForceTouch="true" />

        <ItemGroup>
            <FileWrites Include="$(CharacterDataOutputPath)java\lang\%(CharacterDataStaticItem.Identity).java" />
            <Compile Include="$(CharacterDataOutputPath)java\lang\%(CharacterDataStaticItem.Identity).java" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateDependsOn>
            GenerateCharacterData;
            GenerateCharacterDataStatic;
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <CharsetDecoderOutputPath>$(IntermediateOutputPath)jdk_chardec\</CharsetDecoderOutputPath>
    </PropertyGroup>

    <Target Name="GenerateCharsetDecoder" DependsOnTargets="BuildJdkBuildTools;ResolveJava" Inputs="$(MSBuildThisFileFullPath);$(JdkBuildToolsStampFile);$(OpenJdkDir)jdk\src\share\classes\java\nio\charset\Charset-X-Coder.java.template" Outputs="$(CharsetDecoderOutputPath)java\nio\charset\CharsetDecoder.java">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath) >/dev/null 2>&amp;1" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" StandardErrorImportance="low" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <ItemGroup>
            <_GenerateCharsetDecoderArgs Include="-Kdecoder" />
            <_GenerateCharsetDecoderArgs Include="-DA=&quot;A&quot;" />
            <_GenerateCharsetDecoderArgs Include="-Da=&quot;a&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DCode=&quot;Decode&quot;" />
            <_GenerateCharsetDecoderArgs Include="-Dcode=&quot;decode&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DitypesPhrase=&quot;bytes in a specific charset&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DotypesPhrase=&quot;sixteen-bit Unicode characters&quot;" />
            <_GenerateCharsetDecoderArgs Include="-Ditype=&quot;byte&quot;" />
            <_GenerateCharsetDecoderArgs Include="-Dotype=&quot;character&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DItype=&quot;Byte&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DOtype=&quot;Char&quot;" />
            <_GenerateCharsetDecoderArgs Include="-Dcoder=&quot;decoder&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DCoder=&quot;Decoder&quot;" />
            <_GenerateCharsetDecoderArgs Include="-Dcoding=&quot;decoding&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DOtherCoder=&quot;Encoder&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DreplTypeName=&quot;string&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DdefaultRepl=&quot;String.valueOf(%27%5c%5cuFFFD%27)&quot;" Condition="!$([MSBuild]::IsOSUnixLike())" />
            <_GenerateCharsetDecoderArgs Include="-DdefaultRepl=&quot;String.valueOf(%27%5c%5c%5c%5cuFFFD%27)&quot;" Condition="$([MSBuild]::IsOSUnixLike())" />
            <_GenerateCharsetDecoderArgs Include="-DdefaultReplName=&quot;&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DreplType=&quot;String&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DreplFQType=&quot;java.lang.String&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DreplLength=&quot;length()&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DItypesPerOtype=&quot;CharsPerByte&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DnotLegal=&quot;not legal for this charset&quot;" />
            <_GenerateCharsetDecoderArgs Include="-Dotypes-per-itype=&quot;chars-per-byte&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DoutSequence=&quot;Unicode character&quot;" />
            <_GenerateCharsetDecoderTmpl Include="$(OpenJdkDir)jdk\src\share\classes\java\nio\charset\Charset-X-Coder.java.template" />
            <_GenerateCharsetDecoderTemp Include="$(CharsetDecoderOutputPath)java\nio\charset\CharsetDecoder.java.tmp" />
            <_GenerateCharsetDecoderFile Include="$(CharsetDecoderOutputPath)java\nio\charset\CharsetDecoder.java" />
        </ItemGroup>

        <RemoveDir Directories="$(CharsetDecoderOutputPath)java\nio\charset" />
        <MakeDir Directories="$(CharsetDecoderOutputPath)java\nio\charset" />
        <Message Text="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.spp.Spp @(_GenerateCharsetDecoderArgs, ' ') &lt; @(_GenerateCharsetDecoderTmpl) &gt; @(_GenerateCharsetDecoderTemp)" />
        <Exec Command="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.spp.Spp @(_GenerateCharsetDecoderArgs, ' ') &lt; @(_GenerateCharsetDecoderTmpl) &gt; @(_GenerateCharsetDecoderTemp)" />
        <Move SourceFiles="@(_GenerateCharsetDecoderTemp)" DestinationFiles="@(_GenerateCharsetDecoderFile)" />

        <ItemGroup>
            <FileWrites Include="@(_GenerateCharsetDecoderTemp)" />
            <FileWrites Include="@(_GenerateCharsetDecoderFile)" />
            <Compile Include="@(_GenerateCharsetDecoderFile)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <CharsetEncoderOutputPath>$(IntermediateOutputPath)jdk_charenc\</CharsetEncoderOutputPath>
    </PropertyGroup>

    <Target Name="GenerateCharsetEncoder" DependsOnTargets="BuildJdkBuildTools;ResolveJava" Inputs="$(MSBuildThisFileFullPath);$(JdkBuildToolsStampFile);$(OpenJdkDir)jdk\src\share\classes\java\nio\charset\Charset-X-Coder.java.template" Outputs="$(CharsetEncoderOutputPath)java\nio\charset\CharsetEncoder.java">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath) >/dev/null 2>&amp;1" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" StandardErrorImportance="low" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <ItemGroup>
            <_GenerateCharsetEncoderArgs Include="-Kencoder" />
            <_GenerateCharsetEncoderArgs Include="-DA=&quot;An&quot;" />
            <_GenerateCharsetEncoderArgs Include="-Da=&quot;an&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DCode=&quot;Encode&quot;" />
            <_GenerateCharsetEncoderArgs Include="-Dcode=&quot;encode&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DitypesPhrase=&quot;sixteen-bit Unicode characters&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DotypesPhrase=&quot;bytes in a specific charset&quot;" />
            <_GenerateCharsetEncoderArgs Include="-Ditype=&quot;character&quot;" />
            <_GenerateCharsetEncoderArgs Include="-Dotype=&quot;byte&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DItype=&quot;Char&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DOtype=&quot;Byte&quot;" />
            <_GenerateCharsetEncoderArgs Include="-Dcoder=&quot;encoder&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DCoder=&quot;Encoder&quot;" />
            <_GenerateCharsetEncoderArgs Include="-Dcoding=&quot;encoding&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DOtherCoder=&quot;Decoder&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DreplTypeName=&quot;byte array&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DdefaultRepl=&quot;new byte[] { (byte)%27%3f%27 }&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DdefaultReplName=&quot;&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DreplType=&quot;byte[]&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DreplFQType=&quot;byte[]&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DreplLength=&quot;length&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DItypesPerOtype=&quot;BytesPerChar&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DnotLegal=&quot;not a legal sixteen-bit Unicode sequence&quot;" />
            <_GenerateCharsetEncoderArgs Include="-Dotypes-per-itype=&quot;bytes-per-char&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DoutSequence=&quot;byte sequence in the given charset&quot;" />
            <_GenerateCharsetEncoderTmpl Include="$(OpenJdkDir)jdk\src\share\classes\java\nio\charset\Charset-X-Coder.java.template" />
            <_GenerateCharsetEncoderTemp Include="$(CharsetEncoderOutputPath)java\nio\charset\CharsetEncoder.java.tmp" />
            <_GenerateCharsetEncoderFile Include="$(CharsetEncoderOutputPath)java\nio\charset\CharsetEncoder.java" />
        </ItemGroup>

        <RemoveDir Directories="$(CharsetEncoderOutputPath)java\nio\charset" />
        <MakeDir Directories="$(CharsetEncoderOutputPath)java\nio\charset" />
        <Message Text="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.spp.Spp @(_GenerateCharsetEncoderArgs, ' ') &lt; @(_GenerateCharsetEncoderTmpl) &gt; @(_GenerateCharsetEncoderTemp)" />
        <Exec Command="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.spp.Spp @(_GenerateCharsetEncoderArgs, ' ') &lt; @(_GenerateCharsetEncoderTmpl) &gt; @(_GenerateCharsetEncoderTemp)" />
        <Move SourceFiles="@(_GenerateCharsetEncoderTemp)" DestinationFiles="@(_GenerateCharsetEncoderFile)" />

        <ItemGroup>
            <FileWrites Include="@(_GenerateCharsetEncoderTemp)" />
            <FileWrites Include="@(_GenerateCharsetEncoderFile)" />
            <Compile Include="@(_GenerateCharsetEncoderFile)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateDependsOn>
            GenerateCharsetDecoder;
            GenerateCharsetEncoder;
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <CharsetMappingOutputPath>$(IntermediateOutputPath)\jdk_charmap\</CharsetMappingOutputPath>
        <CharsetMappingData>$(OpenJdkDir)jdk\make\data\charsetmapping\</CharsetMappingData>
        <CharsetMappingJavaSource>$(OpenJdkDir)jdk\make\src\classes\build\tools\charsetmapping\</CharsetMappingJavaSource>
    </PropertyGroup>

    <ItemGroup>
        <CharsetMappingTemplate Include="$(CharsetMappingData)SingleByte-X.java.template" />
        <CharsetMappingTemplate Include="$(CharsetMappingData)DoubleByte-X.java.template" />
    </ItemGroup>

    <ItemGroup>
        <CharsetMappingItem Include="sbcs" Source="$(CharsetMappingData)" Destination="sun\nio\cs" />
        <CharsetMappingItem Include="sjis0213" Source="$(CharsetMappingData)sjis0213.map" Destination="sun\nio\cs\ext\sjis0213.dat" />
        <CharsetMappingItem Include="euctw" Source="$(CharsetMappingData)" Destination="sun\nio\cs\ext" Copyright="$(CharsetMappingJavaSource)EUC_TW.java" />
        <CharsetMappingItem Include="hkscs" Source="$(CharsetMappingData)" Destination="sun\nio\cs\ext" Copyright="$(CharsetMappingJavaSource)HKSCS.java" />
        <CharsetMappingItem Include="extsbcs" Source="$(CharsetMappingData)" Destination="sun\nio\cs\ext" />
        <CharsetMappingItem Include="dbcs" Source="$(CharsetMappingData)" Destination="sun\nio\cs\ext" />
    </ItemGroup>

    <Target Name="GenerateCharsetMappings" DependsOnTargets="BuildJdkBuildTools;ResolveJava" Inputs="$(MSBuildThisFileFullPath);$(JdkBuildToolsStampFile);@(CharsetMappingTemplate)" Outputs="$(CharsetMappingOutputPath)%(CharsetMappingItem.Identity).stamp">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath) >/dev/null 2>&amp;1" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" StandardErrorImportance="low" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <ItemGroup>
            <_GenerateCharsetMappingArgs Include="%(CharsetMappingItem.Source)" />
            <_GenerateCharsetMappingArgs Include="$(CharsetMappingOutputPath)%(CharsetMappingItem.Identity)\%(CharsetMappingItem.Destination)" />
            <_GenerateCharsetMappingArgs Include="%(CharsetMappingItem.Identity)" />
            <_GenerateCharsetMappingArgs Include="%(CharsetMappingItem.Copyright)" Condition=" '%(CharsetMappingItem.Copyright)' != '' " />
        </ItemGroup>

        <RemoveDir Directories="$(CharsetMappingOutputPath)%(CharsetMappingItem.Identity)\sun\nio\cs" />
        <MakeDir Directories="$(CharsetMappingOutputPath)%(CharsetMappingItem.Identity)\sun\nio\cs" />
        <MakeDir Directories="$(CharsetMappingOutputPath)%(CharsetMappingItem.Identity)\sun\nio\cs\ext" />
        <Message Text="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.charsetmapping.Main @(_GenerateCharsetMappingArgs, ' ')" />
        <Exec Command="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.charsetmapping.Main @(_GenerateCharsetMappingArgs, ' ')" />
        <Touch Files="$(CharsetMappingOutputPath)%(CharsetMappingItem.Identity).stamp" AlwaysCreate="true" ForceTouch="true" />

        <ItemGroup>
            <_GenerateCharsetMappingsItems Remove="@(_GenerateCharsetMappingsItems)" />
            <_GenerateCharsetMappingsItems Include="$(CharsetMappingOutputPath)%(CharsetMappingItem.Identity)\**\*" />
            <FileWrites Include="$(CharsetMappingOutputPath)%(CharsetMappingItem.Identity).stamp" />
            <FileWrites Include="@(_GenerateCharsetMappingsItems)" />
            <Compile Include="@(_GenerateCharsetMappingsItems)" Condition=" '%(Extension)' == '.java' " />
            <JavaResource Include="@(_GenerateCharsetMappingsItems)" ResourcePath="%(RecursiveDir)%(Filename)%(Extension)" Condition=" '%(Extension)' != '.java' " />
        </ItemGroup>
    </Target>

    <UsingTask TaskName="ReadStandardCharsets" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <Task>
            <Code Type="Class" Language="cs">
                <![CDATA[
using System;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;

using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
    
public class ReadStandardCharsets : Task
{

    class Charset
    {
    
        public string Name { get; set; }
        
        public string ClassName { get; set; }
        
        public List<string> Aliases { get; set; } = new ();
        
    }
    
    static readonly Regex copyrightRegex = new Regex(@"copyright\s+(?<copyright>\S+)*", RegexOptions.Compiled);
    static readonly Regex packageRegex = new Regex(@"package\s+(?<package>\S+)", RegexOptions.Compiled);
    static readonly Regex classRegex = new Regex(@"class\s+(?<class>\S+)", RegexOptions.Compiled);
    static readonly Regex charsetRegex = new Regex(@"charset\s+(?<name>\S+)\s+(?<classname>\S+)", RegexOptions.Compiled);
    static readonly Regex aliasRegex = new Regex(@"\s+alias\s+(?<alias>\S+)", RegexOptions.Compiled);
    
    [Required]
    public string SourceFile { get; set; }
    
    [Output]
    public string Copyright { get; set; }
    
    [Output]
    public string Package { get; set; }
    
    [Output]
    public string Class { get; set; }
    
    [Required]
    public string ClassesFile { get; set; }
    
    [Required]
    public string AliasesFile { get; set; }
    
    [Output]
    public ITaskItem[] Charsets { get; set; }
    
    public override bool Execute()
    {
        string copyright = null;
        string package = null;
        string clazz = null;
        List<Charset> charsets = new ();
        Charset currentCharset = null;

        string line;
        using var file = File.OpenText(SourceFile);
        while ((line = file.ReadLine()) != null)
        {
            if (string.IsNullOrWhiteSpace(line))
                continue;

            var p = line.IndexOf("#");
            if (p >= 0)
                line = line.Substring(0, p);
            if (string.IsNullOrWhiteSpace(line))
                continue;

            if (copyrightRegex.Match(line) is Match copyrightMatch && copyrightMatch.Success)
            {
                currentCharset = null;
                copyright = copyrightMatch.Groups["copyright"].Value;
                continue;
            }

            if (packageRegex.Match(line) is Match packageMatch && packageMatch.Success)
            {
                currentCharset = null;
                package = packageMatch.Groups["package"].Value;
                continue;
            }

            if (classRegex.Match(line) is Match classMatch && classMatch.Success)
            {
                currentCharset = null;
                clazz = classMatch.Groups["class"].Value;
                continue;
            }

            if (charsetRegex.Match(line) is Match charsetMatch && charsetMatch.Success)
            {
                charsets.Add(currentCharset = new Charset());
                currentCharset.Name = charsetMatch.Groups["name"].Value;
                currentCharset.ClassName = charsetMatch.Groups["classname"].Value;
                continue;
            }

            if (currentCharset != null && aliasRegex.Match(line) is Match aliasMatch && aliasMatch.Success)
            {
                if (currentCharset == null)
                    continue;
                    
                currentCharset.Aliases.Add(aliasMatch.Groups["alias"].Value);
                continue;
            }
        }
        
        Copyright = copyright;
        Package = package;
        Class = clazz;
        var l = new List<ITaskItem>();
        foreach (var charset in charsets)
        {
            var t = new TaskItem(charset.Name);
            t.SetMetadata("ClassName", charset.ClassName);
            t.SetMetadata("Aliases", string.Join(";", charset.Aliases));
            l.Add(t);
        }
        Charsets = l.ToArray();
        
        using var classesFile = new StreamWriter(File.Open(ClassesFile, FileMode.Create));
        foreach (var charset in charsets)
            classesFile.WriteLine("{0} \"{1}\"", charset.Name.ToLower().PadRight(20), charset.ClassName);
        
        using var aliasesFile = new StreamWriter(File.Open(AliasesFile, FileMode.Create));
        foreach (var charset in charsets)
            foreach (var alias in charset.Aliases)
                aliasesFile.WriteLine("{0} \"{1}\"", alias.ToLower().PadRight(20), charset.Name.ToLower());
        
        return true;
    }
    
}
            ]]>
            </Code>
        </Task>
    </UsingTask>

    <UsingTask TaskName="WriteStandardCharsets" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <Task>
            <Code Type="Class" Language="cs">
                <![CDATA[
using System;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;

using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
    
public class WriteStandardCharsets : Task
{

    [Required]
    public string OutputFile { get; set; }
    
    [Output]
    public string Copyright { get; set; }
    
    [Output]
    public string Package { get; set; }
    
    [Output]
    public string Class { get; set; }
    
    [Output]
    public ITaskItem[] Charsets { get; set; }
    
    [Required]
    public string AliasesClassFile { get; set; }
    
    [Required]
    public string ClassesClassFile { get; set; }
    
    [Required]
    public string CacheClassFile { get; set; }
    
    public override bool Execute()
    {
        using var o = new StreamWriter(File.Open(OutputFile, FileMode.Create));
        o.WriteLine($@"package {Package};");
        o.WriteLine($@"");
        o.WriteLine($@"import java.nio.charset.*;");
        o.WriteLine($@"");
        o.WriteLine($@"");
        o.WriteLine($@"public class {Class}");
        o.WriteLine($@"    extends FastCharsetProvider");
        o.WriteLine($@"{{");
        o.WriteLine($@"");
        
        foreach (var charset in Charsets)
        {
            o.WriteLine($@"    static final String[] aliases_{charset.GetMetadata("ClassName")} = new String[] {{");
            foreach (var alias in charset.GetMetadata("Aliases").Split(';'))
                o.WriteLine($@"        ""{alias}"",");
            o.WriteLine($@"    }};");
            o.WriteLine($@"");
        }
        
        o.Write(File.ReadAllText(AliasesClassFile));
        o.Write(File.ReadAllText(ClassesClassFile));
        o.Write(File.ReadAllText(CacheClassFile));
        
        o.WriteLine($@"    public StandardCharsets() {{");
        o.WriteLine($@"        super(""sun.nio.cs"", new Aliases(), new Classes(), new Cache());");
        o.WriteLine($@"    }}");
        o.WriteLine($@"");
        
        o.WriteLine($@"}}");
        o.WriteLine($@"");
        
        return true;
    }
    
}
            ]]>
            </Code>
        </Task>
    </UsingTask>

    <PropertyGroup>
        <StandardCharsetsOutputPath>$(IntermediateOutputPath)jdk_stdchar\</StandardCharsetsOutputPath>
        <StandardCharsetsTempPath>$(IntermediateOutputPath)jdk_stdchar_tmp\</StandardCharsetsTempPath>
    </PropertyGroup>

    <Target Name="GenerateStandardCharsets" Inputs="$(MSBuildThisFileFullPath);$(JdkBuildToolsStampFile);$(OpenJdkDir)jdk\src\share\classes\sun\nio\cs\standard-charsets" Outputs="$(StandardCharsetsOutputPath)sun\nio\cs\StandardCharsets.java">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath) >/dev/null 2>&amp;1" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" StandardErrorImportance="low" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <RemoveDir Directories="$(StandardCharsetsTempPath)" />
        <MakeDir Directories="$(StandardCharsetsTempPath)" />

        <ReadStandardCharsets SourceFile="$(OpenJdkDir)jdk\src\share\classes\sun\nio\cs\standard-charsets" ClassesFile="$(StandardCharsetsTempPath)classes" AliasesFile="$(StandardCharsetsTempPath)aliases">
            <Output TaskParameter="Copyright" PropertyName="_Copyright" />
            <Output TaskParameter="Package" PropertyName="_Package" />
            <Output TaskParameter="Class" PropertyName="_Class" />
            <Output TaskParameter="Charsets" ItemName="_Charsets" />
        </ReadStandardCharsets>

        <Exec Command="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.hasher.Hasher -i Aliases &lt; $(StandardCharsetsTempPath)aliases &gt; $(StandardCharsetsTempPath)Aliases.java" />
        <Exec Command="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.hasher.Hasher -i Classes &lt; $(StandardCharsetsTempPath)classes &gt; $(StandardCharsetsTempPath)Classes.java" />
        <Exec Command="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.hasher.Hasher -i -e Cache -t Charset &lt; $(StandardCharsetsTempPath)classes &gt; $(StandardCharsetsTempPath)Cache.java" />

        <RemoveDir Directories="$(StandardCharsetsOutputPath)sun\nio\cs" />
        <MakeDir Directories="$(StandardCharsetsOutputPath)sun\nio\cs" />
        <WriteStandardCharsets
            OutputFile="$(StandardCharsetsOutputPath)sun\nio\cs\StandardCharsets.java"
            Copyright="$(_Copyright)"
            Package="$(_Package)"
            Class="$(_Class)"
            Charsets="@(_Charsets)"
            AliasesClassFile="$(StandardCharsetsTempPath)Aliases.java"
            ClassesClassFile="$(StandardCharsetsTempPath)Classes.java"
            CacheClassFile="$(StandardCharsetsTempPath)Cache.java" />

        <RemoveDir Directories="$(StandardCharsetsTempPath)" />
        <ItemGroup>
            <Compile Include="$(StandardCharsetsOutputPath)sun\nio\cs\StandardCharsets.java" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateDependsOn>
            GenerateCharsetMappings;
            GenerateStandardCharsets;
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <Html32DTDOutputPath>$(IntermediateOutputPath)jdk_html32dtd\</Html32DTDOutputPath>
    </PropertyGroup>

    <Target Name="GenerateHtml32DTD" DependsOnTargets="BuildJdkBuildTools;ResolveJava" Inputs="$(MSBuildThisFileFullPath);$(JdkBuildToolsStampFile);@(BuildScripts)" Outputs="$(Html32DTDOutputPath)javax\swing\text\html\parser\html32.bdtd">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath) >/dev/null 2>&amp;1" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" StandardErrorImportance="low" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <ItemGroup>
            <_DtdHome Include="$(OpenJdkDir)jdk\make\data\dtdbuilder" />
            <_BdtdTemp Include="$(Html32DTDOutputPath)javax\swing\text\html\parser\html32.bdtd.tmp" />
            <_Bdtd Include="$(Html32DTDOutputPath)javax\swing\text\html\parser\html32.bdtd" />
        </ItemGroup>

        <MakeDir Directories="$(Html32DTDOutputPath)javax\swing\text\html\parser" />
        <Message Text="$(JavaExec) -Ddtd_home=@(_DtdHome) -Djava.awt.headless=true -cp $(JdkBuildToolsOutputPath) build.tools.dtdbuilder.DTDBuilder html32 &gt; @(_BdtdTemp)" />
        <Exec Command="$(JavaExec) -Ddtd_home=@(_DtdHome) -Djava.awt.headless=true -cp $(JdkBuildToolsOutputPath) build.tools.dtdbuilder.DTDBuilder html32 &gt; @(_BdtdTemp)" />
        <Move SourceFiles="@(_BdtdTemp)" DestinationFiles="@(_Bdtd)" OverwriteReadOnlyFiles="true" />

        <ItemGroup>
            <FileWrites Include="@(_BdtdTemp)" />
            <FileWrites Include="@(_Bdtd)" />
            <JavaResource Include="@(_Bdtd)" ResourcePath="javax/swing/text/html/parser/html32.bdtd" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateDependsOn>
            GenerateHtml32DTD;
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

    <!--
    
    GenerateExceptions
    
    Reimplementation of GensrcExceptions.gmk.
    
    We implement the make logic and call out to the OpenJDK genExceptions.sh shell script within a Unix environment.
    
    -->

    <ItemGroup>
        <GenerateExceptions Include="." />
        <GenerateExceptions Include="charset" />
        <GenerateExceptions Include="channels" />
    </ItemGroup>

    <Target Name="GenerateExceptions" DependsOnTargets="BuildJdkBuildTools;ResolveJava" Inputs="$(MSBuildThisFileFullPath);@(BuildScripts);@(BuildJdkBuildToolsClassFiles)" Outputs="$(IntermediateOutputPath)GenerateExceptions.$([System.String]::Copy('%(GenerateExceptions.Identity)').Replace('.', '_')).stamp">
        <!-- Disabled for now, otherwise we'd have to call out to POSIX shell which is expensive  -->
    </Target>

    <PropertyGroup>
        <GenerateDependsOn>
            GenerateExceptions;
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

    <!--
    
    GenerateBuffer
    
    Derived from jdk/make/gensrc/GensrcBuffer.gmk. Original code is predominately written in Make. Sets up a number of target files, then calculates some string replacements, and runs the SPP tool.
    We use a custom task to transform the SetupGenBuffer calls into a set of items that contain the SPP commands to run.
    
    -->

    <PropertyGroup>
        <BufferOutputPath>$(IntermediateOutputPath)jdk_buffers\</BufferOutputPath>
    </PropertyGroup>

    <ItemGroup>
        <GenBuffer Include="ByteBuffer" Template="X-Buffer" Type="byte" Bin="1" />
        <GenBuffer Include="CharBuffer" Template="X-Buffer" Type="char" />
        <GenBuffer Include="ShortBuffer" Template="X-Buffer" Type="short" />
        <GenBuffer Include="IntBuffer" Template="X-Buffer" Type="int" />
        <GenBuffer Include="LongBuffer" Template="X-Buffer" Type="long" />
        <GenBuffer Include="FloatBuffer" Template="X-Buffer" Type="float" />
        <GenBuffer Include="DoubleBuffer" Template="X-Buffer" Type="double" />

        <!-- Buffers whose contents are heap-allocated -->
        <GenBuffer Include="HeapByteBuffer" Template="Heap-X-Buffer" Type="byte" />
        <GenBuffer Include="HeapByteBufferR" Template="Heap-X-Buffer" Type="byte" RW="R" />
        <GenBuffer Include="HeapCharBuffer" Template="Heap-X-Buffer" Type="char" />
        <GenBuffer Include="HeapCharBufferR" Template="Heap-X-Buffer" Type="char" RW="R" />
        <GenBuffer Include="HeapShortBuffer" Template="Heap-X-Buffer" Type="short" />
        <GenBuffer Include="HeapShortBufferR" Template="Heap-X-Buffer" Type="short" RW="R" />
        <GenBuffer Include="HeapIntBuffer" Template="Heap-X-Buffer" Type="int" />
        <GenBuffer Include="HeapIntBufferR" Template="Heap-X-Buffer" Type="int" RW="R" />
        <GenBuffer Include="HeapLongBuffer" Template="Heap-X-Buffer" Type="long" />
        <GenBuffer Include="HeapLongBufferR" Template="Heap-X-Buffer" Type="long" RW="R" />
        <GenBuffer Include="HeapFloatBuffer" Template="Heap-X-Buffer" Type="float" />
        <GenBuffer Include="HeapFloatBufferR" Template="Heap-X-Buffer" Type="float" RW="R" />
        <GenBuffer Include="HeapDoubleBuffer" Template="Heap-X-Buffer" Type="double" />
        <GenBuffer Include="HeapDoubleBufferR" Template="Heap-X-Buffer" Type="double" RW="R" />

        <!-- Direct byte buffer -->
        <GenBuffer Include="DirectByteBuffer" Template="Direct-X-Buffer" Type="byte" Bin="1" />
        <GenBuffer Include="DirectByteBufferR" Template="Direct-X-Buffer" Type="byte" Bin="1" RW="R" />

        <!-- Unswapped views of direct byte buffers -->
        <GenBuffer Include="DirectCharBufferU" Template="Direct-X-Buffer" Type="char" BO="U" />
        <GenBuffer Include="DirectCharBufferRU" Template="Direct-X-Buffer" Type="char" RW="R" BO="U" />
        <GenBuffer Include="DirectShortBufferU" Template="Direct-X-Buffer" Type="short" BO="U" />
        <GenBuffer Include="DirectShortBufferRU" Template="Direct-X-Buffer" Type="short" RW="R" BO="U" />
        <GenBuffer Include="DirectIntBufferU" Template="Direct-X-Buffer" Type="int" BO="U" />
        <GenBuffer Include="DirectIntBufferRU" Template="Direct-X-Buffer" Type="int" RW="R" BO="U" />
        <GenBuffer Include="DirectLongBufferU" Template="Direct-X-Buffer" Type="long" BO="U" />
        <GenBuffer Include="DirectLongBufferRU" Template="Direct-X-Buffer" Type="long" RW="R" BO="U" />
        <GenBuffer Include="DirectFloatBufferU" Template="Direct-X-Buffer" Type="float" BO="U" />
        <GenBuffer Include="DirectFloatBufferRU" Template="Direct-X-Buffer" Type="float" RW="R" BO="U" />
        <GenBuffer Include="DirectDoubleBufferU" Template="Direct-X-Buffer" Type="double" BO="U" />
        <GenBuffer Include="DirectDoubleBufferRU" Template="Direct-X-Buffer" Type="double" RW="R" BO="U" />

        <!-- Swapped views of direct byte buffers -->
        <GenBuffer Include="DirectCharBufferS" Template="Direct-X-Buffer" Type="char" BO="S" />
        <GenBuffer Include="DirectCharBufferRS" Template="Direct-X-Buffer" Type="char" RW="R" BO="S" />
        <GenBuffer Include="DirectShortBufferS" Template="Direct-X-Buffer" Type="short" BO="S" />
        <GenBuffer Include="DirectShortBufferRS" Template="Direct-X-Buffer" Type="short" RW="R" BO="S" />
        <GenBuffer Include="DirectIntBufferS" Template="Direct-X-Buffer" Type="int" BO="S" />
        <GenBuffer Include="DirectIntBufferRS" Template="Direct-X-Buffer" Type="int" RW="R" BO="S" />
        <GenBuffer Include="DirectLongBufferS" Template="Direct-X-Buffer" Type="long" BO="S" />
        <GenBuffer Include="DirectLongBufferRS" Template="Direct-X-Buffer" Type="long" RW="R" BO="S" />
        <GenBuffer Include="DirectFloatBufferS" Template="Direct-X-Buffer" Type="float" BO="S" />
        <GenBuffer Include="DirectFloatBufferRS" Template="Direct-X-Buffer" Type="float" RW="R" BO="S" />
        <GenBuffer Include="DirectDoubleBufferS" Template="Direct-X-Buffer" Type="double" BO="S" />
        <GenBuffer Include="DirectDoubleBufferRS" Template="Direct-X-Buffer" Type="double" RW="R" BO="S" />

        <!-- Big-endian views of byte buffers -->
        <GenBuffer Include="ByteBufferAsCharBufferB" Template="ByteBufferAs-X-Buffer" Type="char" BO="B" />
        <GenBuffer Include="ByteBufferAsCharBufferRB" Template="ByteBufferAs-X-Buffer" Type="char" RW="R" BO="B" />
        <GenBuffer Include="ByteBufferAsShortBufferB" Template="ByteBufferAs-X-Buffer" Type="short" BO="B" />
        <GenBuffer Include="ByteBufferAsShortBufferRB" Template="ByteBufferAs-X-Buffer" Type="short" RW="R" BO="B" />
        <GenBuffer Include="ByteBufferAsIntBufferB" Template="ByteBufferAs-X-Buffer" Type="int" BO="B" />
        <GenBuffer Include="ByteBufferAsIntBufferRB" Template="ByteBufferAs-X-Buffer" Type="int" RW="R" BO="B" />
        <GenBuffer Include="ByteBufferAsLongBufferB" Template="ByteBufferAs-X-Buffer" Type="long" BO="B" />
        <GenBuffer Include="ByteBufferAsLongBufferRB" Template="ByteBufferAs-X-Buffer" Type="long" RW="R" BO="B" />
        <GenBuffer Include="ByteBufferAsFloatBufferB" Template="ByteBufferAs-X-Buffer" Type="float" BO="B" />
        <GenBuffer Include="ByteBufferAsFloatBufferRB" Template="ByteBufferAs-X-Buffer" Type="float" RW="R" BO="B" />
        <GenBuffer Include="ByteBufferAsDoubleBufferB" Template="ByteBufferAs-X-Buffer" Type="double" BO="B" />
        <GenBuffer Include="ByteBufferAsDoubleBufferRB" Template="ByteBufferAs-X-Buffer" Type="double" RW="R" BO="B" />

        <!-- Little-endian views of byte buffers -->
        <GenBuffer Include="ByteBufferAsCharBufferL" Template="ByteBufferAs-X-Buffer" Type="char" BO="L" />
        <GenBuffer Include="ByteBufferAsCharBufferRL" Template="ByteBufferAs-X-Buffer" Type="char" RW="R" BO="L" />
        <GenBuffer Include="ByteBufferAsShortBufferL" Template="ByteBufferAs-X-Buffer" Type="short" BO="L" />
        <GenBuffer Include="ByteBufferAsShortBufferRL" Template="ByteBufferAs-X-Buffer" Type="short" RW="R" BO="L" />
        <GenBuffer Include="ByteBufferAsIntBufferL" Template="ByteBufferAs-X-Buffer" Type="int" BO="L" />
        <GenBuffer Include="ByteBufferAsIntBufferRL" Template="ByteBufferAs-X-Buffer" Type="int" RW="R" BO="L" />
        <GenBuffer Include="ByteBufferAsLongBufferL" Template="ByteBufferAs-X-Buffer" Type="long" BO="L" />
        <GenBuffer Include="ByteBufferAsLongBufferRL" Template="ByteBufferAs-X-Buffer" Type="long" RW="R" BO="L" />
        <GenBuffer Include="ByteBufferAsFloatBufferL" Template="ByteBufferAs-X-Buffer" Type="float" BO="L" />
        <GenBuffer Include="ByteBufferAsFloatBufferRL" Template="ByteBufferAs-X-Buffer" Type="float" RW="R" BO="L" />
        <GenBuffer Include="ByteBufferAsDoubleBufferL" Template="ByteBufferAs-X-Buffer" Type="double" BO="L" />
        <GenBuffer Include="ByteBufferAsDoubleBufferRL" Template="ByteBufferAs-X-Buffer" Type="double" RW="R" BO="L" />
    </ItemGroup>

    <!--
    
    Reimplementation of the Make code in C#. Accepts the set of calls to SetupGenBuffer, produces an ItemGroup of the commands to be run with SPP.
    
    -->
    <UsingTask TaskName="SetupGenBuffer" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <GenBuffer ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <GenBufferCommand ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
void fixRw(Hashtable kv, string rw)
{
    kv["RW"] = rw;
    kv["rwkey"] = "rw";
    if (rw == "R")
    {
        kv["rwkey"] = "ro";
    }
}

void typesAndBits(Hashtable kv, string type, string bo)
{
    kv["a"] = "a";
    kv["A"] = "A";
    
    kv["type"] = type;
    
    if (type == "byte")
    {
        kv["x"] = "b";
        kv["Type"] = "Byte";
        kv["fulltype"] = "byte";
        kv["Fulltype"] = "Byte";
        kv["category"] = "integralType";
        kv["LBPV"] = "0";
    }
    
    if (type == "char")
    {
        kv["x"] = "c";
        kv["Type"] = "Char";
        kv["fulltype"] = "character";
        kv["Fulltype"] = "Character";
        kv["category"] = "integralType";
        kv["streams"] = "streamableType";
        kv["streamtype"] = "int";
        kv["Streamtype"] = "Int";
        kv["LBPV"] = "1";
    }
    
    if (type == "short")
    {
        kv["x"] = "s";
        kv["Type"] = "Short";
        kv["fulltype"] = "short";
        kv["Fulltype"] = "Short";
        kv["category"] = "integralType";
        kv["LBPV"] = "1";
    }
    
    if (type == "int")
    {
        kv["a"] = "an";
        kv["A"] = "An";
        kv["x"] = "i";
        kv["Type"] = "Int";
        kv["fulltype"] = "integer";
        kv["Fulltype"] = "Integer";
        kv["category"] = "integralType";
        kv["LBPV"] = "2";
    }
    
    if (type == "long")
    {
        kv["x"] = "l";
        kv["Type"] = "Long";
        kv["fulltype"] = "long";
        kv["Fulltype"] = "Long";
        kv["category"] = "integralType";
        kv["LBPV"] = "3";
    }
    
    if (type == "float")
    {
        kv["x"] = "f";
        kv["Type"] = "Float";
        kv["fulltype"] = "float";
        kv["Fulltype"] = "Float";
        kv["category"] = "floatingPointType";
        kv["LBPV"] = "2";
    }
    
    if (type == "double")
    {
        kv["x"] = "d";
        kv["Type"] = "Double";
        kv["fulltype"] = "double";
        kv["Fulltype"] = "Double";
        kv["category"] = "floatingPointType";
        kv["LBPV"] = "3";
    }
    
    kv["Swaptype"] = kv["Type"];
    kv["memtype"] = type;
    kv["Memtype"] = kv["Type"];
    
    if (type == "float")
    {
        kv["memtype"] = "int";
        kv["Memtype"] = "Int";
        if (bo != "U")
        {
            kv["Swaptype"] = "Int";
            kv["fromBits"] = "Float.intBitsToFloat";
            kv["toBits"] = "Float.floatToRawIntBits";
        }
    }
    
    if (type == "double")
    {
        kv["memtype"] = "long";
        kv["Memtype"] = "Long";
        if (bo != "U")
        {
            kv["Swaptype"] = "Long";
            kv["fromBits"] = "Double.longBitsToDouble";
            kv["toBits"] = "Double.doubleToRawLongBits";
        }
    }
    
    if (bo == "S")
    {
        kv["swap"] = "Bits.swap";
    }
}

string genBinOps(string type, string bo, string rw, string nbytes, string nbytesButOne)
{
    var kv = new Hashtable();

    typesAndBits(kv, type, bo);
    fixRw(kv, rw);
    kv["nbytes"] = nbytes;
    kv["nbytesButOne"] = nbytesButOne;
    
    var args = new List<string>();
    args.Add($"-Dtype={kv["type"]}");
    args.Add($"-DType={kv["Type"]}");
    args.Add($"-Dfulltype={kv["fulltype"]}");
    args.Add($"-Dmemtype={kv["memtype"]}");
    args.Add($"-DMemtype={kv["Memtype"]}");
    args.Add($"-DfromBits={kv["fromBits"]}");
    args.Add($"-DtoBits={kv["toBits"]}");
    args.Add($"-DLG_BYTES_PER_VALUE={kv["LBPV"]}");
    args.Add($"-DBYTES_PER_VALUE=\"{(1 << int.Parse((string)kv["LBPV"]))}\"");
    args.Add($"-Dnbytes={kv["nbytes"]}");
    args.Add($"-DnbytesButOne={kv["nbytesButOne"]}");
    args.Add($"-DRW={kv["RW"]}");
    args.Add($"-K{kv["rwkey"]}");
    args.Add($"-Da={kv["a"]}");
    args.Add($"-be");
    return string.Join(" ", args);
}
                
var genBufferCommand = new List<ITaskItem>();

foreach (var bb in GenBuffer)
{
    var kv = new Hashtable();
    kv["type"] = bb.GetMetadata("Type");
    kv["RW"] = bb.GetMetadata("RW");
    kv["BO"] = bb.GetMetadata("BO");
    kv["BIN"] = bb.GetMetadata("Bin");

    fixRw(kv, (string)kv["RW"]);
    typesAndBits(kv, (string)kv["type"], (string)kv["BO"]);
    
    var args = new List<string>();
    args.Add($"-K{kv["type"]}");
    args.Add($"-K{kv["category"]}");
    args.Add($"-K{kv["streams"]}");
	args.Add($"-Dtype={kv["type"]}");
	args.Add($"-DType={kv["Type"]}");
	args.Add($"-Dfulltype={kv["fulltype"]}");
	args.Add($"-DFulltype={kv["Fulltype"]}");
	args.Add($"-Dstreamtype={kv["streamtype"]}");
	args.Add($"-DStreamtype={kv["Streamtype"]}");
	args.Add($"-Dx={kv["x"]}");
	args.Add($"-Dmemtype={kv["memtype"]}");
	args.Add($"-DMemtype={kv["Memtype"]}");
	args.Add($"-DSwaptype={kv["Swaptype"]}");
	args.Add($"-DfromBits={kv["fromBits"]}");
	args.Add($"-DtoBits={kv["toBits"]}");
	args.Add($"-DLG_BYTES_PER_VALUE={kv["LBPV"]}");
	args.Add($"-DBYTES_PER_VALUE=\"{(1 << int.Parse((string)kv["LBPV"]))}\"");
	args.Add($"-DBO={kv["BO"]}");
	args.Add($"-Dswap={kv["swap"]}");
	args.Add($"-DRW={kv["RW"]}");
	args.Add($"-K{kv["rwkey"]}");
	args.Add($"-Da={kv["a"]}");
	args.Add($"-DA={kv["A"]}");
	args.Add($"-Kbo{kv["BO"]}");
    
    var t = new TaskItem(bb);
    t.SetMetadata("CMD", string.Join(" ", args));
    
    if ((string)kv["BIN"] == "1")
    {
        t.SetMetadata("CMD_char", genBinOps("char", (string)kv["BO"], (string)kv["RW"], "two", "one"));
        t.SetMetadata("CMD_short", genBinOps("short", (string)kv["BO"], (string)kv["RW"], "two", "one"));
        t.SetMetadata("CMD_int", genBinOps("int", (string)kv["BO"], (string)kv["RW"], "four", "three"));
        t.SetMetadata("CMD_long", genBinOps("long", (string)kv["BO"], (string)kv["RW"], "eight", "seven"));
        t.SetMetadata("CMD_float", genBinOps("float", (string)kv["BO"], (string)kv["RW"], "four", "three"));
        t.SetMetadata("CMD_double", genBinOps("double", (string)kv["BO"], (string)kv["RW"], "eight", "seven"));
    }
    
    genBufferCommand.Add(t);
}

GenBufferCommand = genBufferCommand.ToArray();

]]>
            </Code>
        </Task>
    </UsingTask>

    <!--
    
    Strips text from a file after the line containing #BIN. This is done using sed in the original Make code.
    
    -->

    <UsingTask TaskName="SetupGenBuffer_StripBin" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Path ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
File.WriteAllLines(Path, File.ReadAllLines(Path).TakeWhile(i => i.Contains("#BIN") == false));
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <Target Name="GenerateBuffersSetup">
        <SetupGenBuffer GenBuffer="@(GenBuffer)">
            <Output TaskParameter="GenBufferCommand" ItemName="_GenBufferCommand" />
        </SetupGenBuffer>
    </Target>

    <Target Name="GenerateBuffers" DependsOnTargets="BuildJdkBuildTools;ResolveJava;GenerateBuffersSetup" Inputs="$(MSBuildThisFileFullPath);$(JdkBuildToolsStampFile);@(BuildScripts);$(OpenJdkDir)jdk\src\share\classes\java\nio\%(_GenBufferCommand.Template).java.template" Outputs="$(BufferOutputPath)java\nio\%(_GenBufferCommand.Identity).java">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath) >/dev/null 2>&amp;1" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" StandardErrorImportance="low" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <Message Text="$(OpenJdkDir)jdk\src\share\classes\java\nio\%(_GenBufferCommand.Template).java.template --&gt; $(BufferOutputPath)java\nio\%(_GenBufferCommand.Identity).java" />

        <ItemGroup>
            <_Src Remove="@(_Src)" />
            <_Src Include="$(OpenJdkDir)jdk\src\share\classes\java\nio\%(_GenBufferCommand.Template).java.template" />
            <_Bin Remove="@(_Bin)" />
            <_Bin Include="$(OpenJdkDir)jdk\src\share\classes\java\nio\%(_GenBufferCommand.Template)-bin.java.template" />
            <_Tmp Remove="@(_Tmp)" />
            <_Tmp Include="$(BufferOutputPath)java\nio\%(_GenBufferCommand.Identity).java.tmp" />
            <_Dst Remove="@(_Dst)" />
            <_Dst Include="$(BufferOutputPath)java\nio\%(_GenBufferCommand.Identity).java" />
        </ItemGroup>

        <MakeDir Directories="$(BufferOutputPath)java\nio\" />
        <Delete Files="@(_Tmp)" />
        <Message Text="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.spp.Spp %(_GenBufferCommand.CMD) &lt; @(_Src) &gt; @(_Tmp)" />
        <Exec Command="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.spp.Spp %(_GenBufferCommand.CMD) &lt; @(_Src) &gt; @(_Tmp)" />

        <SetupGenBuffer_StripBin Path="@(_Tmp)" Condition=" '%(_GenBufferCommand.Bin)' == '1' " />
        <Exec Command="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.spp.Spp %(_GenBufferCommand.CMD_char) &lt; @(_Bin) &gt;&gt; @(_Tmp)" Condition=" '%(_GenBufferCommand.CMD_char)' != '' " />
        <Exec Command="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.spp.Spp %(_GenBufferCommand.CMD_short) &lt; @(_Bin) &gt;&gt; @(_Tmp)" Condition=" '%(_GenBufferCommand.CMD_short)' != '' " />
        <Exec Command="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.spp.Spp %(_GenBufferCommand.CMD_int) &lt; @(_Bin) &gt;&gt; @(_Tmp)" Condition=" '%(_GenBufferCommand.CMD_int)' != '' " />
        <Exec Command="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.spp.Spp %(_GenBufferCommand.CMD_long) &lt; @(_Bin) &gt;&gt; @(_Tmp)" Condition=" '%(_GenBufferCommand.CMD_long)' != '' " />
        <Exec Command="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.spp.Spp %(_GenBufferCommand.CMD_float) &lt; @(_Bin) &gt;&gt; @(_Tmp)" Condition=" '%(_GenBufferCommand.CMD_float)' != '' " />
        <Exec Command="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.spp.Spp %(_GenBufferCommand.CMD_double) &lt; @(_Bin) &gt;&gt; @(_Tmp)" Condition=" '%(_GenBufferCommand.CMD_double)' != '' " />
        <WriteLinesToFile File="@(_Tmp)" Lines="}" Condition=" '%(_GenBufferCommand.Bin)' == '1' " />
        <Move SourceFiles="@(_Tmp)" DestinationFiles="@(_Dst)" OverwriteReadOnlyFiles="true" />

        <ItemGroup>
            <FileWrites Include="@(_Tmp)" />
            <FileWrites Include="@(_Dst)" />
            <Compile Include="@(_Dst)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateDependsOn>
            GenerateBuffersSetup;
            GenerateBuffers;
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <CalendarDataVersion>21.0.1</CalendarDataVersion>
        <CalendarOutputPath>$(IntermediateOutputPath)jdk_cldr\</CalendarOutputPath>
    </PropertyGroup>

    <ItemGroup>
        <CalendarSourcePath Include="$(OpenJdkDir)jdk\src\share\classes\sun\util\cldr\resources\$(CalendarDataVersion.Replace('.', '_'))" />
        <CalendarSourceItem Include="$(CalendarSourcePath)\common\dtd\*.dtd" />
        <CalendarSourceItem Include="$(CalendarSourcePath)\common\main\*.xml" />
        <CalendarSourceItem Include="$(CalendarSourcePath)\common\supplemental\*.xml" />
    </ItemGroup>

    <Target Name="GenerateCalendarData" DependsOnTargets="BuildJdkBuildTools;ResolveJava" Inputs="$(MSBuildThisFileFullPath);$(JdkBuildToolsStampFile);@(CalendarSourceItem)" Outputs="$(CalendarOutputPath)sun\util\cldr\CLDRLocaleDataMetaInfo.java">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath) >/dev/null 2>&amp;1" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" StandardErrorImportance="low" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <RemoveDir Directories="$(CalendarOutputPath)" />
        <MakeDir Directories="$(CalendarOutputPath)sun\util\cldr\" />
        <Message Text="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.cldrconverter.CLDRConverter -base @(CalendarSourcePath) -o $(CalendarOutputPath)" />
        <Exec Command="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.cldrconverter.CLDRConverter -base @(CalendarSourcePath) -o $(CalendarOutputPath)" />

        <ItemGroup>
            <FileWrites Include="$(CalendarOutputPath)**\*" />
            <Compile Include="$(CalendarOutputPath)**\*.java" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateDependsOn>
            GenerateCalendarData;
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <IconsOutputPath>$(IntermediateOutputPath)jdk_icons\</IconsOutputPath>
    </PropertyGroup>

    <ItemGroup>
        <AwtIconsSrc Include="$(OpenJdkDir)jdk\src\$(OpenJdkTargetOsApiDir)\classes\sun\awt\X11\java-icon16.png" />
        <AwtIconsSrc Include="$(OpenJdkDir)jdk\src\$(OpenJdkTargetOsApiDir)\classes\sun\awt\X11\java-icon24.png" />
        <AwtIconsSrc Include="$(OpenJdkDir)jdk\src\$(OpenJdkTargetOsApiDir)\classes\sun\awt\X11\java-icon32.png" />
        <AwtIconsSrc Include="$(OpenJdkDir)jdk\src\$(OpenJdkTargetOsApiDir)\classes\sun\awt\X11\java-icon48.png" />
        <AwtIconsSrc Include="$(OpenJdkDir)jdk\src\share\classes\sun\awt\resources\security-icon-bw16.png" />
        <AwtIconsSrc Include="$(OpenJdkDir)jdk\src\share\classes\sun\awt\resources\security-icon-interim16.png" />
        <AwtIconsSrc Include="$(OpenJdkDir)jdk\src\share\classes\sun\awt\resources\security-icon-yellow16.png" />
        <AwtIconsSrc Include="$(OpenJdkDir)jdk\src\share\classes\sun\awt\resources\security-icon-bw24.png" />
        <AwtIconsSrc Include="$(OpenJdkDir)jdk\src\share\classes\sun\awt\resources\security-icon-interim24.png" />
        <AwtIconsSrc Include="$(OpenJdkDir)jdk\src\share\classes\sun\awt\resources\security-icon-yellow24.png" />
        <AwtIconsSrc Include="$(OpenJdkDir)jdk\src\share\classes\sun\awt\resources\security-icon-bw32.png" />
        <AwtIconsSrc Include="$(OpenJdkDir)jdk\src\share\classes\sun\awt\resources\security-icon-interim32.png" />
        <AwtIconsSrc Include="$(OpenJdkDir)jdk\src\share\classes\sun\awt\resources\security-icon-yellow32.png" />
        <AwtIconsSrc Include="$(OpenJdkDir)jdk\src\share\classes\sun\awt\resources\security-icon-bw48.png" />
        <AwtIconsSrc Include="$(OpenJdkDir)jdk\src\share\classes\sun\awt\resources\security-icon-interim48.png" />
        <AwtIconsSrc Include="$(OpenJdkDir)jdk\src\share\classes\sun\awt\resources\security-icon-yellow48.png" />

        <AwtIcons Include="@(AwtIconsSrc->Exists())">
            <ShortName>$([System.String]::Copy('%(Filename)%(Extension)').Replace('.', '_').Replace('-', '_'))</ShortName>
            <ClassName>AWTIcon32_$([System.String]::Copy('%(Filename)%(Extension)').Replace('.', '_').Replace('-', '_'))</ClassName>
        </AwtIcons>
        <AwtIcons Include="@(AwtIconsSrc->Exists())">
            <ShortName>$([System.String]::Copy('%(Filename)%(Extension)').Replace('.', '_').Replace('-', '_'))</ShortName>
            <ClassName>AWTIcon64_$([System.String]::Copy('%(Filename)%(Extension)').Replace('.', '_').Replace('-', '_'))</ClassName>
        </AwtIcons>
    </ItemGroup>

    <Target Name="GenerateIcons" DependsOnTargets="BuildJdkBuildTools;ResolveJava" Inputs="$(MSBuildThisFileFullPath);$(JdkBuildToolsStampFile);@(AwtIcons)" Outputs="$(IconsOutputPath)sun\awt\%(AwtIcons.ClassName).java">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath) >/dev/null 2>&amp;1" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" StandardErrorImportance="low" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <Message Text="%(AwtIcons.Identity) --&gt; $(IntermediateOutputPath)jdk_icons\sun\awt\%(AwtIcons.ClassName).java" />

        <ItemGroup>
            <_Src Remove="@(_Src)" />
            <_Src Include="%(AwtIcons.Identity)" />
            <_Tmp Remove="@(_Tmp)" />
            <_Tmp Include="$(IconsOutputPath)sun\awt\%(AwtIcons.ClassName).java.tmp" />
            <_Dst Remove="@(_Dst)" />
            <_Dst Include="$(IconsOutputPath)sun\awt\%(AwtIcons.ClassName).java" />
        </ItemGroup>

        <MakeDir Directories="$(IconsOutputPath)sun\awt\" />
        <Delete Files="@(_Tmp)" Condition="Exists('@(_Tmp)')" />
        <WriteLinesToFile Lines="package sun.awt%3b" File="@(_Tmp)" />
        <WriteLinesToFile Lines="public class %(AwtIcons.ClassName) {" File="@(_Tmp)" />
        <WriteLinesToFile Lines="public static int[] %(AwtIcons.ShortName) = {" File="@(_Tmp)" />
        <Exec Command="$(JavaExec) -Djava.awt.headless=true -cp $(JdkBuildToolsOutputPath) build.tools.icondata.awt.ToBin &lt; @(_Src) &gt;&gt; @(_Tmp)" />
        <WriteLinesToFile Lines="}%3b" File="@(_Tmp)" />
        <WriteLinesToFile Lines="}" File="@(_Tmp)" />
        <Move SourceFiles="@(_Tmp)" DestinationFiles="@(_Dst)" OverwriteReadOnlyFiles="true" />

        <ItemGroup>
            <FileWrites Include="@(_Tmp)" />
            <FileWrites Include="@(_Dst)" />
            <Compile Include="@(_Dst)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateDependsOn>
            GenerateIcons;
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <NimbusOutputPath>$(IntermediateOutputPath)jdk_nimbus\</NimbusOutputPath>
        <NimbusSkinPath>$(OpenJdkDir)jdk\src\share\classes\javax\swing\plaf\nimbus</NimbusSkinPath>
        <NimbusSkinFile>$(OpenJdkDir)jdk\src\share\classes\javax\swing\plaf\nimbus\skin.laf</NimbusSkinFile>
    </PropertyGroup>

    <Target Name="GenerateNimbus" DependsOnTargets="BuildJdkBuildTools;ResolveJava" Inputs="$(MSBuildThisFileFullPath);$(JdkBuildToolsStampFile);@(NimbusSkinFile)" Outputs="$(NimbusOutputPath)stamp">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath) >/dev/null 2>&amp;1" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" StandardErrorImportance="low" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <Message Text="Generating Nimbus source files" />
        <RemoveDir Directories="$(NimbusOutputPath)" />
        <MakeDir Directories="$(NimbusOutputPath)javax\swing\plaf\nimbus" />
        <Exec Command="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.generatenimbus.Generator -skinFile $(NimbusSkinFile) -buildDir $(NimbusOutputPath) -packagePrefix javax.swing.plaf.nimbus -lafName Nimbus" />
        <Touch Files="$(NimbusOutputPath)stamp" AlwaysCreate="true" ForceTouch="true" />
        <Message Text="Finished generating Nimbus source files" />

        <ItemGroup>
            <FileWrites Include="$(NimbusOutputPath)**" />
            <Compile Include="$(NimbusOutputPath)**\*.java" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateDependsOn>
            GenerateNimbus;
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <X11WrapperOutputPath>$(IntermediateOutputPath)jdk_x11wrappers\</X11WrapperOutputPath>
        <X11WrapperTempPath>$(IntermediateOutputPath)jdk_x11wrappers_tmp\</X11WrapperTempPath>
        <XLibTypes>$(OpenJdkDir)jdk\src\solaris\classes\sun\awt\X11\generator\xlibtypes.txt</XLibTypes>
        <XLibSizes32>$(OpenJdkDir)jdk\src\solaris\classes\sun\awt\X11\generator\sizes.32</XLibSizes32>
        <XLibSizes64>$(OpenJdkDir)jdk\src\solaris\classes\sun\awt\X11\generator\sizes.64</XLibSizes64>
        <GenerateX11WrappersStampFile>$(X11WrapperOutputPath)stamp</GenerateX11WrappersStampFile>
    </PropertyGroup>

    <Target Name="GenerateX11Wrappers" DependsOnTargets="BuildJdkBuildTools;ResolveJava" Inputs="$(MSBuildThisFileFullPath);$(JdkBuildToolsStampFile);$(XLibSizes32);$(XLibSizes64);$(XLibTypes)" Outputs="$(GenerateX11WrappersStampFile)" Condition=" '$(IkvmJavaRuntimeIdentifier)' == 'linux' ">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath) >/dev/null 2>&amp;1" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" StandardErrorImportance="low" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <ItemGroup>
            <_X11WrapperSizePath Remove="@(_X11WrapperTempPath)" />
            <_X11WrapperSizePath Include="$(X11WrapperTempPath)sizes" />
            <_X11WrapperOutputPath Remove="@(_X11WrapperOutputPath)" />
            <_X11WrapperOutputPath Include="$(X11WrapperOutputPath)" />
            <_XLibTypes Remove="@(_XLibTypes)" />
            <_XLibTypes Include="$(XLibTypes)" />
        </ItemGroup>

        <RemoveDir Directories="$(X11WrapperTempPath)" />
        <RemoveDir Directories="$(X11WrapperOutputPath)" />
        <MakeDir Directories="$(X11WrapperTempPath)" />
        <MakeDir Directories="$(X11WrapperOutputPath)" />
        <Copy SourceFiles="$(XLibSizes32)" DestinationFiles="$(X11WrapperTempPath)sizes.32" />
        <Copy SourceFiles="$(XLibSizes64)" DestinationFiles="$(X11WrapperTempPath)sizes.64" />
        <Touch Files="$(X11WrapperTempPath)sizes.32" ForceTouch="true" />
        <Touch Files="$(X11WrapperTempPath)sizes.64" ForceTouch="true" />
        <Exec Command="$(JavaExec) -cp $(JdkBuildToolsOutputPath) WrapperGenerator @(_X11WrapperOutputPath) @(_XLibTypes) gen @(_X11WrapperSizePath)" />
        <Touch Files="$(GenerateX11WrappersStampFile)" ForceTouch="true" AlwaysCreate="true" />
        <RemoveDir Directories="$(X11WrapperTempPath)" />

        <ItemGroup>
            <FileWrites Include="$(X11WrapperOutputPath)**\*" />
            <Compile Include="$(X11WrapperOutputPath)**\*.java" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateDependsOn>
            GenerateX11Wrappers;
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <UniNameDatSource>$(OpenJdkDir)jdk\make\data\unicodedata\UnicodeData.txt</UniNameDatSource>
        <UniNameDatOutput>$(IntermediateOutputPath)jdk_uniname\uniName.dat</UniNameDatOutput>
    </PropertyGroup>

    <Target Name="GenerateUniName" DependsOnTargets="BuildJdkBuildTools;ResolveJava" Inputs="$(MSBuildThisFileFullPath);$(JdkBuildToolsStampFile);$(UniNameDatSource)" Outputs="$(UniNameDatOutput)">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath) &gt;/dev/null 2&gt;&amp;1" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" StandardErrorImportance="low" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <Delete Files="$(UniNameDatOutput).tmp" />
        <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('$(UniNameDatOutput)'))" />
        <Exec Command="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.generatecharacter.CharacterName $(UniNameDatSource) $(UniNameDatOutput).tmp" />
        <Move SourceFiles="$(UniNameDatOutput).tmp" DestinationFiles="$(UniNameDatOutput)" />
        <Touch Files="$(UniNameDatOutput)" ForceTouch="true" AlwaysCreate="true" />

        <ItemGroup>
            <FileWrites Include="$(UniNameDatOutput)" />
            <FileWrites Include="$(UniNameDatOutput).tmp" />
            <JavaResource Include="$(UniNameDatOutput)" ResourcePath="java/lang/uniName.dat" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateDependsOn>
            GenerateUniName;
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <LocaleEquivalentMapsSource>$(OpenJdkDir)jdk\make\data\lsrdata\language-subtag-registry.txt</LocaleEquivalentMapsSource>
        <LocaleEquivalentMapsOutput>$(IntermediateOutputPath)jdk_lsrequivmaps\LocaleEquivalentMaps.java</LocaleEquivalentMapsOutput>
    </PropertyGroup>

    <Target Name="GenerateLocaleEquivalentMaps" DependsOnTargets="BuildJdkBuildTools;ResolveJava" Inputs="$(MSBuildThisFileFullPath);$(JdkBuildToolsStampFile);$(LocaleEquivalentMapsSource)" Outputs="$(LocaleEquivalentMapsOutput)">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath) >/dev/null 2>&amp;1" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" StandardErrorImportance="low" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('$(LocaleEquivalentMapsOutput)'))" />
        <Message Text="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.generatelsrequivmaps.EquivMapsGenerator $(LocaleEquivalentMapsSource) $(LocaleEquivalentMapsOutput)" />
        <Exec Command="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.generatelsrequivmaps.EquivMapsGenerator $(LocaleEquivalentMapsSource) $(LocaleEquivalentMapsOutput)" />

        <ItemGroup>
            <FileWrites Include="$(LocaleEquivalentMapsOutput)" />
            <Compile Include="$(LocaleEquivalentMapsOutput)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateDependsOn>
            GenerateLocaleEquivalentMaps;
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <BreakIteratorOutputPath>$(IntermediateOutputPath)jdk_breakiterator\</BreakIteratorOutputPath>
        <BreakIteratorPackage>sun/text/resources</BreakIteratorPackage>
    </PropertyGroup>

    <ItemGroup>
        <BreakIteratorSources Include="$(OpenJdkDir)jdk\src\share\classes\$(BreakIteratorPackage)\BreakIteratorRules.java" />
        <BreakIteratorSources Include="$(OpenJdkDir)jdk\src\share\classes\$(BreakIteratorPackage)\BreakIteratorInfo.java" />
        <BreakIteratorSources Include="$(OpenJdkDir)jdk\src\share\classes\$(BreakIteratorPackage)\th\BreakIteratorRules_th.java" />
        <BreakIteratorSources Include="$(OpenJdkDir)jdk\src\share\classes\$(BreakIteratorPackage)\th\BreakIteratorInfo_th.java" />
        <BreakIteratorOutputs Include="$(BreakIteratorOutputPath)$(BreakIteratorPackage)\BreakIteratorRules.class" />
        <BreakIteratorOutputs Include="$(BreakIteratorOutputPath)$(BreakIteratorPackage)\BreakIteratorInfo.class" />
        <BreakIteratorOutputs Include="$(BreakIteratorOutputPath)$(BreakIteratorPackage)\th\BreakIteratorRules_th.class" />
        <BreakIteratorOutputs Include="$(BreakIteratorOutputPath)$(BreakIteratorPackage)\th\BreakIteratorInfo_th.class" />
        <BreakIteratorData Include="$(BreakIteratorOutputPath)$(BreakIteratorPackage)\CharacterBreakIteratorData" Language="" />
        <BreakIteratorData Include="$(BreakIteratorOutputPath)$(BreakIteratorPackage)\WordBreakIteratorData" Language="" />
        <BreakIteratorData Include="$(BreakIteratorOutputPath)$(BreakIteratorPackage)\LineBreakIteratorData" Language="" />
        <BreakIteratorData Include="$(BreakIteratorOutputPath)$(BreakIteratorPackage)\SentenceBreakIteratorData" Language="" />
        <BreakIteratorData Include="$(BreakIteratorOutputPath)$(BreakIteratorPackage)\th\WordBreakIteratorData_th" Language="th" />
        <BreakIteratorData Include="$(BreakIteratorOutputPath)$(BreakIteratorPackage)\th\LineBreakIteratorData_th" Language="th" />
    </ItemGroup>

    <Target Name="GenerateBreakIteratorClasses" DependsOnTargets="ResolveJavaCompiler" Inputs="$(MSBuildThisFileFullPath);@(BreakIteratorSources)" Outputs="@(BreakIteratorOutputs)">
        <Error Text="Could not locate javac executable." Condition=" '$(JavaCompilerPath)' == '' " />
        <Error Text="javac could not be located at '$(JavaCompilerPath)'." Condition="!Exists('$(JavaCompilerPath)')" />
        <Exec Command="chmod +x $(JavaCompilerPath) >/dev/null 2>&amp;1" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" StandardErrorImportance="low" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <ItemGroup>
            <_BreakIteratorOutputPath Remove="@(_BreakIteratorOutputPath)" />
            <_BreakIteratorOutputPath Include="$(BreakIteratorOutputPath)" />
        </ItemGroup>

        <MakeDir Directories="$(BreakIteratorOutputPath)" />
        <Message Text="$(JavaCompilerExec) @(BreakIteratorSources, ' ') -d @(_BreakIteratorOutputPath)" />
        <Exec Command="$(JavaCompilerExec) @(BreakIteratorSources, ' ') -d @(_BreakIteratorOutputPath)" />

        <ItemGroup>
            <FileWrites Include="@(BreakIteratorOutputs)" />
            <Convert Include="@(BreakIteratorOutputs)" />
        </ItemGroup>
    </Target>

    <Target Name="GenerateBreakIteratorResources" DependsOnTargets="BuildJdkBuildTools;ResolveJava;GenerateBreakIteratorClasses" Inputs="$(MSBuildThisFileFullPath);$(JdkBuildToolsStampFile);@(BreakIteratorOutputs)" Outputs="@(BreakIteratorData)">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath) >/dev/null 2>&amp;1" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" StandardErrorImportance="low" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <ItemGroup>
            <_BreakIteratorClasspath Remove="@(_BreakIteratorClasspath)" />
            <_BreakIteratorClasspath Include="$(BreakIteratorOutputPath)" />
            <_BreakIteratorOutputArg Remove="@(_BreakIteratorOutputArg)" />
            <_BreakIteratorOutputArg Include="$(BreakIteratorOutputPath)$(BreakIteratorPackage)" />
        </ItemGroup>

        <MakeDir Directories="$(BreakIteratorOutputPath)$(BreakIteratorPackage)" />
        <Message Text="$(JavaExec) -cp $(JdkBuildToolsOutputPath) -Xbootclasspath/p:@(_BreakIteratorClasspath) build.tools.generatebreakiteratordata.GenerateBreakIteratorData -o @(_BreakIteratorOutputArg) -spec $(UnicodeDataDir)UnicodeData.txt" />
        <Exec Command="$(JavaExec) -cp $(JdkBuildToolsOutputPath) -Xbootclasspath/p:@(_BreakIteratorClasspath) build.tools.generatebreakiteratordata.GenerateBreakIteratorData -o @(_BreakIteratorOutputArg) -spec $(UnicodeDataDir)UnicodeData.txt" />

        <MakeDir Directories="$(BreakIteratorOutputPath)$(BreakIteratorPackage)\th" />
        <Message Text="$(JavaExec) -cp $(JdkBuildToolsOutputPath) -Xbootclasspath/p:@(_BreakIteratorClasspath) build.tools.generatebreakiteratordata.GenerateBreakIteratorData -o @(_BreakIteratorOutputArg) -spec $(UnicodeDataDir)UnicodeData.txt -language th" />
        <Exec Command="$(JavaExec) -cp $(JdkBuildToolsOutputPath) -Xbootclasspath/p:@(_BreakIteratorClasspath) build.tools.generatebreakiteratordata.GenerateBreakIteratorData -o @(_BreakIteratorOutputArg) -spec $(UnicodeDataDir)UnicodeData.txt -language th" />

        <ItemGroup>
            <FileWrites Include="@(BreakIteratorData)" />
            <JavaResource Include="@(BreakIteratorData)" ResourcePath="$(BreakIteratorPackage)\%(BreakIteratorData.Language)\%(Filename)%(Extension)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateDependsOn>
            GenerateBreakIteratorClasses;
            GenerateBreakIteratorResources;
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <CoreResourceBundleControlSrc>$(OpenJdkDir)jdk\src\share\classes\sun\util\CoreResourceBundleControl-XLocales.java.template</CoreResourceBundleControlSrc>
        <CoreResourceBundleControlDst>$(IntermediateOutputPath)jdk_crbc\CoreResourceBundleControl.java</CoreResourceBundleControlDst>
    </PropertyGroup>

    <ItemGroup>
        <CoreResourceBundleControlNonExistLocales Include="en;en_US;de_DE;es_ES;fr_FR;it_IT;ja_JP;ko_KR;sv_SE;zh" />
    </ItemGroup>

    <UsingTask TaskName="GenerateCoreResourceBundleControl" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <LocaleList ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <SourceFile ParameterType="System.String" Required="true" />
            <OutputFile ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                var l = new List<string>();
                
                var o = new Dictionary<string, string>();
                o["en"] = "ENGLISH";
                o["fr"] = "FRENCH";
                o["de"] = "GERMAN";
                o["it"] = "ITALIAN";
                o["ja"] = "JAPANESE";
                o["ko"] = "KOREAN";
                o["zh"] = "CHINESE";
                o["zh_CN"] = "SIMPLIFIED_CHINESE";
                o["zh_TW"] = "TRADITIONAL_CHINESE";
                o["fr_FR"] = "FRANCE";
                o["de_DE"] = "GERMANY";
                o["it_IT"] = "ITALY";
                o["ja_JP"] = "JAPAN";
                o["ko_KR"] = "KOREA";
                o["en_GB"] = "UK";
                o["en_US"] = "US";
                o["en_CA"] = "CANADA";
                o["fr_CA"] = "CANADA_FRENCH";
                
                foreach (var locale in LocaleList)
                    l.Add(o.ContainsKey(locale.ItemSpec) ? "Locale." + o[locale.ItemSpec] : "new Locale(\"" + string.Join("\", \"", locale.ItemSpec.Split('_')) + "\")");
                    
                Directory.CreateDirectory(Path.GetDirectoryName(OutputFile));
                using var src = File.OpenText(SourceFile);
                using var dst = new StreamWriter(File.Open(OutputFile, FileMode.Create));
                
                string line;
                while ((line = src.ReadLine()) != null)
                    if (line.StartsWith("#warn") == false)
                        dst.WriteLine(line.Replace("#LOCALE_LIST#", string.Join(", ", l)));
                    
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <Target Name="GenerateCoreResourceBundleControl" Inputs="$(MSBuildThisFileFullPath);$(CoreResourceBundleControlSrc)" Outputs="$(CoreResourceBundleControlDst)">
        <GenerateCoreResourceBundleControl
            SourceFile="$(CoreResourceBundleControlSrc)"
            OutputFile="$(CoreResourceBundleControlDst)"
            LocaleList="@(CoreResourceBundleControlNonExistLocales)" />

        <ItemGroup>
            <FileWrites Include="$(CoreResourceBundleControlDst)" />
            <Compile Include="$(CoreResourceBundleControlDst)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateDependsOn>
            GenerateCoreResourceBundleControl;
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <LocaleDataMetaInfoSrc>$(OpenJdkDir)jdk\src\share\classes\sun\util\locale\provider\LocaleDataMetaInfo-XLocales.java.template</LocaleDataMetaInfoSrc>
        <LocaleDataMetaInfoDst>$(IntermediateOutputPath)jdk_locales\LocaleDataMetaInfo.java</LocaleDataMetaInfoDst>
    </PropertyGroup>

    <UsingTask TaskName="GenerateLocaleDataMetaInfo" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <LocaleResourceList ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <SourceFile ParameterType="System.String" Required="true" />
            <OutputFile ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Linq" />
            <Using Namespace="System.Collections.Generic" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                var all_en = new HashSet<string>();
                var all_non_en = new HashSet<string>() { "ja-JP-JP", "th-TH-TH" };
                var resources = new HashSet<string>();
                var locale_en = new Dictionary<string, HashSet<string>>();
                var locale_non_en = new Dictionary<string, HashSet<string>>();
                
                // deconstruct Filename_LOCAL.ext into a list of en and non-en locales
                foreach (var i in LocaleResourceList)
                {
                    var f = i.GetMetadata("Filename");
                    var a = f.Split(new[] { '_' }, 2);
                    var n = a[0];
                    resources.Add(n);
                    
                    var l = a[1].Replace("_", "-");
                    if (l.StartsWith("en"))
                    {
                        if (locale_en.TryGetValue(n, out var en) == false)
                            locale_en[n] = en = new HashSet<string>();
                        
                        en.Add(l);
                        all_en.Add(l);
                    }
                    else
                    {
                        if (locale_non_en.TryGetValue(n, out var non_en) == false)
                            locale_non_en[n] = non_en = new HashSet<string>();
                        
                        non_en.Add(l);
                        all_non_en.Add(l);
                    }
                }
                
                Directory.CreateDirectory(Path.GetDirectoryName(OutputFile));
                using var src = File.OpenText(SourceFile);
                using var dst = new StreamWriter(File.Open(OutputFile, FileMode.Create));
                
                string line;
                while ((line = src.ReadLine()) != null)
                {
                    if (line.StartsWith("#"))
                        continue;
                
                    foreach (var resource in resources)
                    {
                        var en = locale_en.TryGetValue(resource, out var _en) ? _en.OrderBy(i => i) : Enumerable.Empty<string>();
                        line = line.Replace($"#{resource}_ENLocales#", string.Join(" ", en));
                        
                        var non_en = locale_non_en.TryGetValue(resource, out var _non_en) ? _non_en.OrderBy(i => i) : Enumerable.Empty<string>();
                        line = line.Replace($"#{resource}_NonENLocales#", string.Join(" ", non_en));
                    }
                   
                    line = line.Replace("#AvailableLocales_ENLocales#", string.Join(" ", all_en.OrderBy(i => i)));
                    line = line.Replace("#AvailableLocales_NonENLocales#", string.Join(" ", all_non_en.OrderBy(i => i)));
                    dst.WriteLine(line);
                }   
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <Target Name="GenerateLocaleDataMetaInfo" Inputs="$(MSBuildThisFileFullPath);$(LocaleDataMetaInfoSrc)" Outputs="$(LocaleDataMetaInfoDst)">
        <ItemGroup>
            <LocaleResourceList Include="$(OpenJdkDir)jdk\src\share\classes\**\FormatData_*.java" />
            <LocaleResourceList Include="$(OpenJdkDir)jdk\src\share\classes\**\FormatData_*.properties" />
            <LocaleResourceList Include="$(OpenJdkDir)jdk\src\share\classes\**\CollationData_*.java" />
            <LocaleResourceList Include="$(OpenJdkDir)jdk\src\share\classes\**\CollationData_*.properties" />
            <LocaleResourceList Include="$(OpenJdkDir)jdk\src\share\classes\**\TimeZoneNames_*.java" />
            <LocaleResourceList Include="$(OpenJdkDir)jdk\src\share\classes\**\TimeZoneNames_*.properties" />
            <LocaleResourceList Include="$(OpenJdkDir)jdk\src\share\classes\**\LocaleNames_*.java" />
            <LocaleResourceList Include="$(OpenJdkDir)jdk\src\share\classes\**\LocaleNames_*.properties" />
            <LocaleResourceList Include="$(OpenJdkDir)jdk\src\share\classes\**\CurrencyNames_*.java" />
            <LocaleResourceList Include="$(OpenJdkDir)jdk\src\share\classes\**\CurrencyNames_*.properties" />
            <LocaleResourceList Include="$(OpenJdkDir)jdk\src\share\classes\**\CalendarData_*.java" />
            <LocaleResourceList Include="$(OpenJdkDir)jdk\src\share\classes\**\CalendarData_*.properties" />
            <LocaleResourceList Include="$(OpenJdkDir)jdk\src\share\classes\**\BreakIteratorInfo_*.java" />
            <LocaleResourceList Include="$(OpenJdkDir)jdk\src\share\classes\**\BreakIteratorInfo_*.properties" />
            <LocaleResourceList Include="$(OpenJdkDir)jdk\src\share\classes\**\BreakIteratorRules_*.java" />
            <LocaleResourceList Include="$(OpenJdkDir)jdk\src\share\classes\**\BreakIteratorRules_*.properties" />
        </ItemGroup>

        <GenerateLocaleDataMetaInfo
            SourceFile="$(LocaleDataMetaInfoSrc)"
            OutputFile="$(LocaleDataMetaInfoDst)"
            LocaleResourceList="@(LocaleResourceList)" />

        <ItemGroup>
            <FileWrites Include="$(LocaleDataMetaInfoDst)" />
            <Compile Include="$(LocaleDataMetaInfoDst)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateDependsOn>
            GenerateLocaleDataMetaInfo;
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <JdkCleanPropertiesFilesOutputPath>$(IntermediateOutputPath)jdk_cleanprop\</JdkCleanPropertiesFilesOutputPath>
    </PropertyGroup>

    <UsingTask TaskName="GetCleanJdkPropertiesFilesArgs" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Item ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
            <Args ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                    var args = new TaskItem[Item.Length * 3];
                    for (int i = 0; i < Item.Length; i++)
                    {
                        args[i * 3 + 0] = new TaskItem("-clean");
                        args[i * 3 + 1] = new TaskItem(Item[i].ItemSpec);
                        args[i * 3 + 2] = new TaskItem(Path.GetFullPath(Item[i].GetMetadata("_Dest")));
                    }
                    
                    Args = args;
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <Target Name="CleanJdkPropertiesFiles" DependsOnTargets="BuildJdkBuildTools;ResolveJava" Inputs="$(MSBuildThisFileFullPath);$(JdkBuildToolsStampFile);@(JdkCleanPropertiesFile)" Outputs="@(JdkCleanPropertiesFile->'$(JdkCleanPropertiesFilesOutputPath)%(PackagePath)\%(ResourceName).properties')">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath) &gt;/dev/null 2&gt;&amp;1" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" StandardErrorImportance="low" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <ItemGroup>
            <JdkCleanPropertiesFile Update="@(JdkCleanPropertiesFile)">
                <_Dest>$(JdkCleanPropertiesFilesOutputPath)%(PackagePath)\%(ResourceName).properties</_Dest>
            </JdkCleanPropertiesFile>
            <_CleanJdkPropertiesFilesArgs Remove="@(_CleanJdkPropertiesFilesArgs)" />
        </ItemGroup>

        <GetCleanJdkPropertiesFilesArgs Item="@(JdkCleanPropertiesFile)">
            <Output TaskParameter="Args" ItemName="_CleanJdkPropertiesFilesArgs" />
        </GetCleanJdkPropertiesFilesArgs>

        <WriteLinesToFile File="$(IntermediateOutputPath)jdk_cleanprop.rsp" Lines="@(_CleanJdkPropertiesFilesArgs)" Overwrite="true" />
        <MakeDir Directories="@(JdkCleanPropertiesFile->'$(JdkCleanPropertiesFilesOutputPath)%(PackagePath)')" />
        <Message Text="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.stripproperties.StripProperties %40$(IntermediateOutputPath)jdk_cleanprop.rsp" />
        <Exec Command="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.stripproperties.StripProperties %40$(IntermediateOutputPath)jdk_cleanprop.rsp" />

        <ItemGroup>
            <FileWrites Include="$(IntermediateOutputPath)jdk_cleanprop.rsp" />
            <FileWrites Include="@(JdkCleanPropertiesFile->'$(JdkCleanPropertiesFilesOutputPath)%(PackagePath)\%(ResourceName).properties')" />
            <JavaResource Include="@(JdkCleanPropertiesFile->'$(JdkCleanPropertiesFilesOutputPath)%(PackagePath)\%(ResourceName).properties')" ResourcePath="%(JdkCleanPropertiesFile.PackagePath)/%(JdkCleanPropertiesFile.ResourceName).properties" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateDependsOn>
            CleanJdkPropertiesFiles;
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <JdkDuplicatePropertiesFilesOutputPath>$(IntermediateOutputPath)jdk_duplicateprop\</JdkDuplicatePropertiesFilesOutputPath>
    </PropertyGroup>

    <UsingTask TaskName="DuplicateJdkPropertiesFiles" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <SourceFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
            <DestinationFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                for (int i = 0; i < SourceFiles.Length; i++)
                {
                    Directory.CreateDirectory(Path.GetDirectoryName(DestinationFiles[i].ItemSpec));
                
                    string line;
                    using var r = File.OpenText(SourceFiles[i].ItemSpec);
                    using var w = new StreamWriter(File.Open(DestinationFiles[i].ItemSpec, FileMode.Create));
                    
                    while ((line = r.ReadLine()) != null)
                    {
                        if (line.Contains("class"))
                            line = line.Replace(SourceFiles[i].GetMetadata("Filename"), SourceFiles[i].GetMetadata("ClassName"));
                    
                        w.WriteLine(line);
                    }
                }
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <Target Name="RemoveExistingDuplicateJdkPropertiesFiles">
        <ItemGroup>
            <JdkDuplicatePropertiesFile Remove="@(JdkDuplicatePropertiesFile)" Condition="Exists('$(OpenJdkDir)jdk\src\share\classes\%(PackagePath)\%(ClassName).java')" />
        </ItemGroup>
    </Target>

    <Target Name="DuplicateJdkPropertiesFiles" DependsOnTargets="RemoveExistingDuplicateJdkPropertiesFiles" Inputs="$(MSBuildThisFileFullPath);@(JdkDuplicatePropertiesFile)" Outputs="@(JdkDuplicatePropertiesFile->'$(JdkDuplicatePropertiesFilesOutputPath)%(PackagePath)\%(ClassName).java')">
        <DuplicateJdkPropertiesFiles
            SourceFiles="@(JdkDuplicatePropertiesFile)"
            DestinationFiles="@(JdkDuplicatePropertiesFile->'$(JdkDuplicatePropertiesFilesOutputPath)%(PackagePath)\%(ClassName).java')" />

        <ItemGroup>
            <FileWrites Include="@(JdkDuplicatePropertiesFile->'$(JdkDuplicatePropertiesFilesOutputPath)%(PackagePath)\%(ClassName).java')" />
            <Compile Include="@(JdkDuplicatePropertiesFile->'$(JdkDuplicatePropertiesFilesOutputPath)%(PackagePath)\%(ClassName).java')" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateDependsOn>
            RemoveExistingDuplicateJdkPropertiesFiles;
            DuplicateJdkPropertiesFiles;
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <JdkCompilePropertiesFilesOutputPath>$(IntermediateOutputPath)jdk_compileprop\</JdkCompilePropertiesFilesOutputPath>
    </PropertyGroup>

    <UsingTask TaskName="GetCompileJdkPropertiesFilesArgs" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Item ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
            <Args ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                    var args = new TaskItem[Item.Length * 4];
                    for (int i = 0; i < Item.Length; i++)
                    {
                        args[i * 4 + 0] = new TaskItem("-compile");
                        args[i * 4 + 1] = new TaskItem(Item[i].ItemSpec);
                        args[i * 4 + 2] = new TaskItem(Path.GetFullPath(Item[i].GetMetadata("_Dest")));
                        args[i * 4 + 3] = new TaskItem(Item[i].GetMetadata("SuperName"));
                    }
                    
                    Args = args;
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <Target Name="CompileJdkPropertiesFiles" DependsOnTargets="BuildJdkBuildTools;ResolveJava" Inputs="$(MSBuildThisFileFullPath);$(JdkBuildToolsStampFile);@(JdkCompilePropertiesFile)" Outputs="@(JdkCompilePropertiesFile->'$(JdkCompilePropertiesFilesOutputPath)%(PackagePath)\%(ClassName).java')">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath) &gt;/dev/null 2&gt;&amp;1" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" StandardErrorImportance="low" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <ItemGroup>
            <JdkCompilePropertiesFile Update="@(JdkCompilePropertiesFile)">
                <_Dest>$(JdkCompilePropertiesFilesOutputPath)%(PackagePath)\%(ClassName).java</_Dest>
            </JdkCompilePropertiesFile>
            <_CompileJdkPropertiesFilesArgs Remove="@(_CompileJdkPropertiesFilesArgs)" />
        </ItemGroup>

        <GetCompileJdkPropertiesFilesArgs Item="@(JdkCompilePropertiesFile)">
            <Output TaskParameter="Args" ItemName="_CompileJdkPropertiesFilesArgs" />
        </GetCompileJdkPropertiesFilesArgs>

        <WriteLinesToFile File="$(IntermediateOutputPath)jdk_compileprop.rsp" Lines="@(_CompileJdkPropertiesFilesArgs)" Overwrite="true" />
        <MakeDir Directories="@(JdkCompilePropertiesFile->'$(JdkCompilePropertiesFilesOutputPath)%(PackagePath)')" />
        <Message Text="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.compileproperties.CompileProperties %40$(IntermediateOutputPath)jdk_compileprop.rsp" />
        <Exec Command="$(JavaExec) -cp $(JdkBuildToolsOutputPath) build.tools.compileproperties.CompileProperties %40$(IntermediateOutputPath)jdk_compileprop.rsp" />

        <ItemGroup>
            <FileWrites Include="$(IntermediateOutputPath)jdk_compileprop.rsp" />
            <FileWrites Include="@(JdkCompilePropertiesFile->'$(JdkCompilePropertiesFilesOutputPath)%(PackagePath)\%(ClassName).java')" />
            <Compile Include="@(JdkCompilePropertiesFile->'$(JdkCompilePropertiesFilesOutputPath)%(PackagePath)\%(ClassName).java')" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateDependsOn>
            CompileJdkPropertiesFiles;
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

</Project>
