<!--

    IKVM.Java.runtime.targets
    
    Imported by the .runtime projects.

-->

<Project>
    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    </PropertyGroup>

    <Import Project="$(MSBuildThisFileDirectory)..\IKVM.MSBuild\buildTransitive\IKVM.MSBuild.targets" />
    <Import Project="$(MSBuildThisFileDirectory)..\..\IKVM.deps.targets" />
    <Import Project="$(MSBuildThisFileDirectory)..\..\targets\openjdk.buildtools.targets" />

    <Target Name="FindJdk">
        <FindJdk Family="8">
            <Output TaskParameter="JdkPath" PropertyName="JdkPath" />
        </FindJdk>
        <Error Condition=" '$(JdkPath)' == '' " Text="Failed to locate JDK. IKVM.Java requires JDK version 8 available on the system." />
    </Target>

    <Target Name="ResolveJava" DependsOnTargets="FindJdk" Condition=" '$(JavaPath)' == '' ">
        <PropertyGroup>
            <JavaPath Condition=" '$([MSBuild]::IsOSUnixLike())' == 'true' And Exists('$(JdkPath)\bin\java') ">$([System.IO.Path]::GetFullPath('$(JdkPath)\bin\java'))</JavaPath>
            <JavaPath Condition=" '$([MSBuild]::IsOSUnixLike())' != 'true' And Exists('$(JdkPath)\bin\java.exe') ">$([System.IO.Path]::GetFullPath('$(JdkPath)\bin\java.exe'))</JavaPath>
            <JavaArgs></JavaArgs>
            <JavaExec Condition=" '$(JavaPath)' != '' ">"$(JavaPath)" $(JavaArgs)</JavaExec>
        </PropertyGroup>
        <Message Text="Using java executable found at '$(JavaPath)'." Importance="high" Condition=" '$(JavaPath)' != '' " />
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
    </Target>

    <Target Name="ResolveJavaCompiler" DependsOnTargets="FindJdk" Condition=" '$(JavaCompilerPath)' == '' ">
        <PropertyGroup>
            <JavaCompilerPath Condition=" '$([MSBuild]::IsOSUnixLike())' == 'true' And Exists('$(JdkPath)\bin\javac') ">$([System.IO.Path]::GetFullPath('$(JdkPath)\bin\javac'))</JavaCompilerPath>
            <JavaCompilerPath Condition=" '$([MSBuild]::IsOSUnixLike())' != 'true' And Exists('$(JdkPath)\bin\javac.exe') ">$([System.IO.Path]::GetFullPath('$(JdkPath)\bin\javac.exe'))</JavaCompilerPath>
            <JavaCompilerArgs></JavaCompilerArgs>
            <JavaCompilerExec Condition=" '$(JavaCompilerPath)' != '' ">"$(JavaCompilerPath)" $(JavaCompilerArgs)</JavaCompilerExec>
        </PropertyGroup>
        <Message Text="Using javac executable found at '$(JavaCompilerPath)'." Importance="high" Condition=" '$(JavaCompilerPath)' != '' " />
        <Error Text="Could not locate javac executable." Condition=" '$(JavaCompilerPath)' == '' " />
    </Target>

    <PropertyGroup>
        <GenerateDependsOn>
            BuildJdkBuildTools;
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>
    
    <PropertyGroup>
        <ServiceFileOutputPath>$(IntermediateOutputPath)gensvc\</ServiceFileOutputPath>
    </PropertyGroup>

    <UsingTask TaskName="GenerateServiceFiles" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <OpenJdkTargetOs ParameterType="System.String" Required="true" />
            <SourceFile ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <TargetPath ParameterType="System.String" Required="true" />
            <OutputFile ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Concurrent" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Text" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                Directory.CreateDirectory(TargetPath);
                
                var keep = "#[" + OpenJdkTargetOs + "]";
                var svcs = new ConcurrentDictionary<string, List<string>>();
                
                foreach (var file in SourceFile)
                {
                    var name = file.GetMetadata("ServiceName");
                    if (string.IsNullOrEmpty(name))
                        name = file.GetMetadata("Filename") + file.GetMetadata("Extension");
                    
                    var list = svcs.GetOrAdd(name, _ => new List<string>());
                    
                    using var r = File.OpenText(file.ItemSpec);
                    string line;
                    while ((line = r.ReadLine()) != null)
                    {
                        if (line.StartsWith(keep))
                            line = line.Substring(keep.Length);
                        if (line.StartsWith("#"))
                            continue;
                        if (string.IsNullOrWhiteSpace(line))
                            continue;
                        
                        list.Add(line);
                    }
                }
                
                var o = new List<TaskItem>();
                
                foreach (var kvp in svcs)
                {
                    // assemble new version of file
                    var text = new StringBuilder();
                    foreach (var line in kvp.Value)
                        text.AppendLine(line);
                    
                    var path = Path.Combine(TargetPath, kvp.Key);
                    var orig = File.Exists(path) ? File.ReadAllText(path) : "";
                    var curr = text.ToString();
                    if (curr != orig || File.Exists(path) == false)
                        File.WriteAllText(path, curr);
                    
                    o.Add(new TaskItem(path));
                }
                
                OutputFile = o.ToArray();
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <Target Name="GenerateServiceFiles">
        <GenerateServiceFiles OpenJdkTargetOs="$(OpenJdkTargetOsDir)" SourceFile="@(ServiceFile)" TargetPath="$(ServiceFileOutputPath)">
            <Output TaskParameter="OutputFile" ItemName="_GeneratedServiceFiles" />
        </GenerateServiceFiles>
    
        <ItemGroup>
            <FileWrites Include="@(_GeneratedServiceFiles)" />
            <JavaResource Include="@(_GeneratedServiceFiles)" ResourcePath="META-INF/services/%(Filename)%(Extension)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <CompileJavaDependsOn>
            GenerateServiceFiles;
            $(CompileJavaDependsOn);
        </CompileJavaDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <GenerateDependsOn>
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

    <Target Name="Generate" DependsOnTargets="$(GenerateDependsOn)">

    </Target>

    <PropertyGroup>
        <CompileJavaDependsOn>
            Generate;
            $(CompileJavaDependsOn);
        </CompileJavaDependsOn>
    </PropertyGroup>

    <UsingTask TaskName="WriteTextToFile" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Path ParameterType="System.String" Required="true" />
            <Text ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
File.WriteAllBytes(Path, Encoding.UTF8.GetBytes(Text));
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <Import Project="IKVM.Java.runtime.jdk.targets" />
    <Import Project="IKVM.Java.runtime.langtools.targets" />
    <Import Project="IKVM.Java.runtime.nashorn.targets" />
    <Import Project="IKVM.Java.runtime.corba.targets" />

</Project>
