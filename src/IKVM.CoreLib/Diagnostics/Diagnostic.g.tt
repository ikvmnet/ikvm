<#@ template debug="false" hostspecific="true" language="C#" compilerOptions="/unsafe" #>
<#@ include file="Diagnostic.t4" #>
<#@ assembly name="System.CodeDom" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Memory" #>
<#@ assembly name="System.Buffers" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Buffers" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.CompilerServices" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ output extension=".cs" #>
#nullable enable

using System;
using System.Text;

namespace IKVM.CoreLib.Diagnostics
{

    partial record class Diagnostic
    {

        public static Diagnostic? GetById(int id)
        {
            switch (id)
            {
<#
foreach (var kvp in DiagnosticFile.Read(Host.ResolvePath(Path.Combine("Diagnostic.json"))))
{
#>
                case <#= kvp.Value.Id #>:
                    return <#= kvp.Key #>;
<#
}
#>
                default:
                    return null;
            }
        }

<#
foreach (var kvp in DiagnosticFile.Read(Host.ResolvePath(Path.Combine("Diagnostic.json"))))
{
    var desc = kvp.Value.Description;
    if (string.IsNullOrWhiteSpace(desc))
        desc = $"The '{kvp.Key}' diagnostic.";

    var message = new List<string>();
    foreach (var segment in CompositeFormat.Parse(kvp.Value.Message ?? "").Segments)
        message.Add(segment.Literal != null ? segment.Literal : $"{{{kvp.Value.Args.FindIndex(i => i.Name == segment.Arg)}}}");

#>
        /// <summary>
        /// <#= desc #>
        /// </summary>
        /// <remarks>
<#= Util.ToCommentString(kvp.Value) #>
        /// </remarks>
        public static readonly Diagnostic <#= kvp.Key #> = new Diagnostic(<#= kvp.Value.Id #>, nameof(<#= kvp.Key #>), <#= Util.ToStringLiteral(string.Join("", message)) #>, DiagnosticLevel.<#= kvp.Value.Level #>);

<#
}
#>
    }

}
