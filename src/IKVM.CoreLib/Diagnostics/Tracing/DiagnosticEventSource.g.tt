<#@ template debug="false" hostspecific="true" language="C#" compilerOptions="/unsafe" #>
<#@ include file="..\Diagnostic.t4" #>
<#@ assembly name="System.CodeDom" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Memory" #>
<#@ assembly name="System.Buffers" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Buffers" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.CompilerServices" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ output extension=".cs" #>
#nullable enable

using System.Diagnostics.Tracing;

namespace IKVM.CoreLib.Diagnostics.Tracing
{

    partial class DiagnosticEventSource
    {

<#
foreach (var kvp in DiagnosticFile.Read(Host.ResolvePath(Path.Combine("..", "Diagnostic.json"))))
{
    var desc = kvp.Value.Description;
    if (string.IsNullOrWhiteSpace(desc))
        desc = $"The '{kvp.Key}' diagnostic.";

    var level = kvp.Value.Level;
    if (level == "Fatal")
        level = "Critical";
    if (level == "Info")
        level = "Informational";
    if (level == "Trace")
        level = "Verbose";

    var message = new List<string>();
    foreach (var segment in CompositeFormat.Parse(kvp.Value.Message ?? "").Segments)
        message.Add(segment.Literal != null ? segment.Literal : $"{{{kvp.Value.Args.FindIndex(i => i.Name == segment.Arg)}}}");

    var argDecl = new List<string>();
    foreach (var arg in kvp.Value.Args)
        argDecl.Add($"{arg.Type} {arg.Name}");

    var argList = new List<string>();
    argList.Add(kvp.Value.Id.ToString());
    foreach (var arg in kvp.Value.Args)
        argList.Add($"{arg.Name}");

#>
        /// <summary>
        /// <#= desc #>
        /// </summary>
        /// <remarks>
<#= Util.ToCommentString(kvp.Value.Message) #>
        /// </remarks>
        [Event(<#= kvp.Value.Id #>, Message = <#= Util.ToStringLiteral(string.Join("", message)) #>, Level = EventLevel.<#= level #>)]
        public void <#= kvp.Key #>(<#= string.Join(", ", argDecl) #>) => WriteEvent(<#= string.Join(", ", argList) #>);

<#
}
#>
    }

}
